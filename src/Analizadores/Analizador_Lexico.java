/* The following code was generated by JFlex 1.6.1 */

/****************************************  1ra Area: Codigo de Usuario *******************************************/
//------> Paquetes,importaciones
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;


/*************************************  2da Area: Opciones y Declaraciones **************************************/

public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 67, 10, 68, 67, 67,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 57,  5,  0, 66, 60,  0,  0, 61, 62,  9, 58,  0, 59,  4,  8, 
     1, 29, 30, 31, 32, 33, 34,  1,  1,  1,  0, 63, 54, 55, 56,  0, 
     0, 18, 22, 49, 20, 16, 51, 45, 11, 27, 39,  2, 14, 13, 48, 23, 
    37, 52, 35, 47, 12, 43, 36, 65, 50, 25, 41,  0,  0,  0,  0,  3, 
     0, 19, 22, 49, 21, 17, 51, 45, 11, 28, 40,  2, 15, 13, 48, 24, 
    38, 53, 35, 47, 12, 44, 36,  7, 50, 25, 42,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 68,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\7\3\1\1\3\3\1\10\1\3\1\1\4\3"+
    "\1\11\1\12\1\13\1\1\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\0\1\24\1\0\1\25"+
    "\1\26\2\3\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\3\1\36\2\3\1\37\1\0\1\3\1\40"+
    "\7\3\1\0\2\3\1\41\1\42\2\0\7\3\3\0"+
    "\11\3\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\3\3\1\0\2\3\2\0\6\3\1\0\3\3"+
    "\1\53\2\3\2\54\2\3\1\0\1\55\1\3\1\55"+
    "\3\3\1\0\2\3\1\0\1\3\3\0\3\3\1\56"+
    "\5\3\1\57\1\3\1\60\1\0\2\3\2\0\2\3"+
    "\1\61\3\3\1\0\1\3\1\62\3\3\1\63\1\3"+
    "\1\0\2\3\1\64\1\3\1\0\2\3\2\65\3\0"+
    "\3\3\1\66\2\3\1\0\1\3\1\67\1\3\1\0"+
    "\1\3\1\70\1\71\1\72\1\71\1\72\2\3\1\0"+
    "\1\3\2\73\4\3\1\0\2\3\1\74\1\3\2\75"+
    "\1\3\1\0\1\76\1\0\1\3\1\76\2\3\1\77"+
    "\2\100\1\3\1\0\1\3\1\0\1\101\1\102\1\0"+
    "\3\3\1\103\1\3\1\0\1\3\1\104\1\3\1\0"+
    "\1\3\1\105\1\106\1\105\1\106\1\3\1\0\1\3"+
    "\1\0\1\3\2\0\2\3\1\107\1\110\1\0\1\3"+
    "\1\111\2\112\1\3\1\0\1\3\1\0\1\3\1\0"+
    "\2\113\1\3\1\0\1\3\1\114\2\115\1\116\1\117"+
    "\1\0\1\3\2\120\1\0\1\121\4\0\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\105\0\105"+
    "\0\u019e\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\105\0\105\0\105\0\105\0\105\0\105\0\u0114"+
    "\0\u0114\0\u0159\0\105\0\105\0\u085b\0\u08a0\0\317\0\317"+
    "\0\317\0\317\0\317\0\317\0\317\0\u08e5\0\317\0\u092a"+
    "\0\u096f\0\317\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d"+
    "\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\317"+
    "\0\317\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3"+
    "\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb"+
    "\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\105\0\105"+
    "\0\105\0\105\0\105\0\105\0\105\0\105\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\317\0\u17b8\0\u17fd\0\105\0\317\0\u1842\0\u1887\0\u18cc"+
    "\0\105\0\u1911\0\317\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a"+
    "\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\317\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\317"+
    "\0\u1e75\0\317\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\317\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\317"+
    "\0\u21f6\0\u223b\0\u2280\0\317\0\u22c5\0\u230a\0\u234f\0\u2394"+
    "\0\317\0\u23d9\0\u241e\0\u2463\0\u24a8\0\105\0\317\0\u24ed"+
    "\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\317\0\u268b\0\u26d0"+
    "\0\u2715\0\u275a\0\317\0\u279f\0\u27e4\0\u2829\0\317\0\105"+
    "\0\u286e\0\317\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\105"+
    "\0\317\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa"+
    "\0\317\0\u2bef\0\105\0\317\0\u2c34\0\u2c79\0\105\0\u2cbe"+
    "\0\u2d03\0\317\0\u2d48\0\u2d8d\0\317\0\105\0\317\0\u2dd2"+
    "\0\u2e17\0\u2e5c\0\u2ea1\0\317\0\317\0\u2ee6\0\u2f2b\0\u2f70"+
    "\0\u2fb5\0\317\0\u2ffa\0\u303f\0\u3084\0\317\0\u30c9\0\u310e"+
    "\0\u3153\0\105\0\105\0\317\0\317\0\u3198\0\u31dd\0\u3222"+
    "\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0\0\317\0\317"+
    "\0\u3405\0\u344a\0\317\0\105\0\317\0\u348f\0\u34d4\0\u3519"+
    "\0\u355e\0\u35a3\0\u35e8\0\105\0\317\0\u362d\0\u3672\0\u36b7"+
    "\0\317\0\105\0\317\0\105\0\317\0\u36fc\0\u3741\0\105"+
    "\0\317\0\u3786\0\317\0\u37cb\0\u3810\0\u3855\0\u389a\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\4"+
    "\1\10\1\11\1\7\1\12\1\13\1\14\4\4\2\15"+
    "\2\16\1\17\2\20\1\4\1\21\2\22\6\3\1\23"+
    "\1\24\2\25\6\4\1\26\1\27\1\30\1\31\1\32"+
    "\1\4\1\33\2\4\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\4\1\47"+
    "\1\7\107\0\1\3\2\0\1\50\30\0\6\3\43\0"+
    "\3\4\3\0\1\4\3\0\17\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\4\0\1\51\33\0\6\51\42\0"+
    "\5\52\1\53\2\0\2\52\4\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\1\52\1\0\2\52\1\0\3\52"+
    "\1\0\6\52\2\0\1\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\2\0\1\52\3\0\3\52\1\0\17\52"+
    "\67\0\1\54\16\0\3\4\3\0\1\4\3\0\1\4"+
    "\1\55\3\4\2\56\10\4\1\0\2\4\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\12\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\66\3\0\1\67"+
    "\4\4\2\70\2\71\2\72\4\4\1\73\2\74\6\4"+
    "\1\75\12\4\1\0\7\4\13\0\1\66\4\0\3\4"+
    "\3\0\1\4\3\0\14\4\2\76\1\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\2\4\1\77\2\100\12\4\1\0\16\4\2\101"+
    "\3\4\1\0\1\4\1\102\5\4\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\5\4\2\103\5\4\2\104"+
    "\1\4\1\105\2\106\21\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\14\4\2\107\1\4"+
    "\1\0\10\4\1\110\12\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\0\10\4"+
    "\1\111\12\4\1\0\7\4\13\0\1\4\54\0\2\112"+
    "\5\0\1\113\25\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\16\4\2\114\3\4\1\0\1\4\1\115\5\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\14\4"+
    "\2\116\1\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\5\4\2\117\10\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\0\10\4\1\120\12\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\5\4\2\121\10\4\1\0\10\4\1\122\12\4"+
    "\1\0\7\4\13\0\1\4\17\0\1\123\36\0\2\124"+
    "\4\0\1\125\24\0\3\4\3\0\1\4\3\0\1\4"+
    "\1\126\15\4\1\0\20\4\2\127\1\4\1\0\2\4"+
    "\1\130\4\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\14\4\2\131\1\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\1\132"+
    "\4\4\2\133\5\4\2\134\1\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\7\4\2\135\3\4\2\136\1\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\72\0\1\137\104\0\1\140\104\0"+
    "\1\141\104\0\1\142\104\0\1\143\2\0\1\144\101\0"+
    "\1\145\3\0\1\146\12\0\3\4\3\0\1\4\3\0"+
    "\2\4\1\147\14\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\3\0\1\4\3\0\3\4\2\150"+
    "\2\4\2\151\6\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\2\0\1\152\1\4\3\0\17\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\0\23\4\1\0\3\4"+
    "\1\153\3\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\13\4\1\154\3\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\17\0\1\155\1\156\70\0\3\4\3\0"+
    "\1\4\3\0\1\4\1\157\1\160\14\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\20\4\2\161\1\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\11\4"+
    "\2\162\4\4\1\0\10\4\1\163\12\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\7\4"+
    "\2\164\6\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\165\2\166"+
    "\21\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\0\20\4\2\167\1\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\7\4\2\170\2\171\4\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\10\4\1\172\12\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\0\20\4"+
    "\2\173\1\4\1\0\7\4\13\0\1\4\47\0\1\174"+
    "\41\0\3\4\3\0\1\4\3\0\17\4\1\0\11\4"+
    "\1\175\11\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\11\4\2\176\1\4\2\177\1\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\67\0\2\200"+
    "\33\0\1\201\71\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\23\4\1\0\5\4\2\202\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\1\4\1\203\15\4\1\0"+
    "\23\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\2\4\1\204\14\4\1\0\14\4\2\205"+
    "\5\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\0\10\4\1\206\12\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\17\4\1\207\2\210\21\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\14\4\2\211\1\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\212\2\213\21\4\1\0"+
    "\7\4\13\0\1\4\46\0\1\214\73\0\3\215\113\0"+
    "\1\216\42\0\3\4\3\0\1\4\3\0\17\4\1\0"+
    "\10\4\1\217\12\4\1\0\7\4\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\17\4\1\215\2\220\21\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\10\4\1\221\12\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\1\4"+
    "\1\222\15\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\7\4\2\223\6\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\0\23\4\1\0\1\4"+
    "\1\224\5\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\3\4\2\225\12\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\3\4"+
    "\2\226\12\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\0\23\4"+
    "\1\0\1\4\1\227\5\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\3\4\2\230\12\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\11\4\1\231\11\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\11\4"+
    "\2\232\4\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\64\0\1\233\24\0\3\4\3\0\1\4\3\0\1\4"+
    "\1\234\15\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\3\4\2\235\12\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\21\0\2\236"+
    "\105\0\2\237\64\0\3\4\3\0\1\4\3\0\3\4"+
    "\2\240\12\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\5\4\2\241\10\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\5\4\2\242\10\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\5\4\2\243\10\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\7\4"+
    "\2\244\6\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\0\10\4"+
    "\1\245\12\4\1\0\7\4\13\0\1\4\60\0\1\246"+
    "\30\0\3\4\3\0\1\4\3\0\17\4\1\0\22\4"+
    "\1\247\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\3\4\2\250\12\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\17\4\1\0\10\4\1\251\12\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\3\0\1\4\3\0\5\4\2\252"+
    "\10\4\1\0\23\4\1\0\7\4\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\13\4\1\253\3\4\1\0"+
    "\23\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\16\4\1\254\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\3\4"+
    "\2\255\12\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\56\0\2\256\31\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\20\4\2\257\1\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\7\4\2\260\6\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\14\4\2\261\1\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\11\4\2\262\4\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\63\0\1\263\25\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\23\4\1\0\1\4\1\264\5\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\10\4\1\265\12\4\1\0\7\4\13\0\1\4"+
    "\61\0\2\266\26\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\23\4\1\266\1\267\6\4\13\0\1\4\35\0"+
    "\3\270\121\0\2\271\64\0\3\272\51\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\270\2\273\21\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\16\4\2\274\3\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\272\2\275"+
    "\21\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\0\10\4\1\276\12\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\1\4\1\277\15\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\3\0\1\4\3\0\14\4\2\300"+
    "\1\4\1\0\23\4\1\0\7\4\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\17\4\1\0\23\4\1\301"+
    "\1\302\6\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\1\4\1\303\15\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\5\4"+
    "\2\304\10\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\23\0\2\305\64\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\23\4\1\0\2\4\1\306\4\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\5\4\2\307\10\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\23\0\2\310"+
    "\141\0\2\311\26\0\3\4\3\0\1\4\3\0\5\4"+
    "\2\312\10\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\0\23\4"+
    "\1\311\1\313\6\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\0\10\4\1\314\12\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\11\4\2\315\4\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\3\0\1\4\3\0\17\4\1\316"+
    "\2\317\21\4\1\0\7\4\13\0\1\4\63\0\1\320"+
    "\25\0\3\4\3\0\1\4\3\0\17\4\1\0\23\4"+
    "\1\0\1\4\1\321\5\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\7\4\2\322\6\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\23\4\1\0\2\4\1\323\4\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\3\4"+
    "\2\324\12\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\5\4\2\325\10\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\35\0\3\326"+
    "\51\0\3\4\3\0\1\4\3\0\17\4\1\326\2\327"+
    "\21\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\0\23\4\1\0\1\4\1\330"+
    "\5\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\5\4\2\331\2\332\6\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\17\0\1\333\71\0\3\4\3\0\1\4"+
    "\3\0\1\4\1\334\15\4\1\0\23\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\0\22\4\1\335\1\0\7\4\13\0\1\4\63\0"+
    "\1\336\46\0\2\337\126\0\2\340\37\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\0\23\4\1\0\1\4\1\341"+
    "\5\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\7\4\2\342\6\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\3\0\1\4\3\0\17\4\1\0"+
    "\12\4\2\343\7\4\1\0\7\4\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\17\4\1\0\10\4\1\344"+
    "\12\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\0\10\4\1\345\12\4\1\0"+
    "\7\4\13\0\1\4\23\0\2\346\64\0\3\4\3\0"+
    "\1\4\3\0\5\4\2\347\10\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\1\4\1\350\15\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\63\0\1\351\25\0\3\4\3\0\1\4\3\0"+
    "\14\4\2\352\1\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\11\0\1\353\77\0\3\4\2\0\1\353\1\4"+
    "\3\0\17\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\0\23\4"+
    "\1\0\1\4\1\354\5\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\14\4\2\355\1\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\21\0\2\356\66\0\3\4"+
    "\3\0\1\4\3\0\3\4\2\357\12\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\23\4\1\0\1\4\1\360\5\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\1\361"+
    "\16\4\1\0\23\4\1\0\7\4\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\5\4\2\362\10\4\1\0"+
    "\23\4\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\7\4\2\363\6\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\23\0\2\364\64\0\3\4\3\0"+
    "\1\4\3\0\5\4\2\365\10\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\7\4\2\366\6\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\3\0\1\4\3\0\17\4\1\0"+
    "\23\4\1\0\1\4\1\367\5\4\13\0\1\4\4\0"+
    "\3\4\3\0\1\4\3\0\17\4\1\370\2\371\21\4"+
    "\1\0\7\4\13\0\1\4\60\0\1\372\43\0\1\373"+
    "\71\0\3\4\3\0\1\4\3\0\17\4\1\0\22\4"+
    "\1\374\1\0\7\4\13\0\1\4\4\0\3\4\3\0"+
    "\1\4\3\0\1\4\1\375\15\4\1\0\23\4\1\0"+
    "\7\4\13\0\1\4\4\0\3\4\3\0\1\4\3\0"+
    "\7\4\2\376\6\4\1\0\23\4\1\0\7\4\13\0"+
    "\1\4\4\0\3\4\3\0\1\4\3\0\17\4\1\377"+
    "\2\u0100\21\4\1\0\7\4\13\0\1\4\11\0\1\u0101"+
    "\77\0\3\4\3\0\1\4\3\0\3\4\2\u0102\12\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\63\0\1\u0103"+
    "\42\0\2\u0104\66\0\3\4\3\0\1\4\3\0\3\4"+
    "\2\u0105\12\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\17\4\1\0\14\4"+
    "\2\u0106\5\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\7\4\2\u0107\6\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\4\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\23\4\1\0\1\4\1\u0108\5\4"+
    "\13\0\1\4\46\0\1\u0109\42\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\0\10\4\1\u010a\12\4\1\0\7\4"+
    "\13\0\1\4\4\0\3\4\3\0\1\4\3\0\7\4"+
    "\2\u010b\6\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\25\0\2\u010c\62\0\3\4\3\0\1\4\3\0\7\4"+
    "\2\u010d\6\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\11\4\2\u010e\4\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\64\0\1\u010f"+
    "\24\0\3\4\3\0\1\4\3\0\17\4\1\0\23\4"+
    "\1\0\2\4\1\u0110\4\4\13\0\1\4\20\0\1\u0111"+
    "\70\0\3\4\3\0\1\4\3\0\14\4\2\u0112\1\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\23\0\2\u0113"+
    "\112\0\2\u0114\55\0\3\4\3\0\1\4\3\0\14\4"+
    "\2\u0115\1\4\1\0\23\4\1\0\7\4\13\0\1\4"+
    "\4\0\3\4\3\0\1\4\3\0\7\4\2\u0116\6\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\27\0\2\u0117"+
    "\60\0\3\4\3\0\1\4\3\0\11\4\2\u0118\4\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\4\0\3\4"+
    "\3\0\1\4\3\0\14\4\2\u0119\1\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\25\0\2\u011a\62\0\3\4"+
    "\3\0\1\4\3\0\7\4\2\u011b\6\4\1\0\23\4"+
    "\1\0\7\4\13\0\1\4\17\0\1\u011c\71\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\0\10\4\1\u011d\12\4"+
    "\1\0\7\4\13\0\1\4\12\0\1\u011e\71\0\1\u011e"+
    "\4\0\3\4\3\0\1\4\3\0\11\4\2\u011f\4\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\25\0\2\u0120"+
    "\62\0\3\4\3\0\1\4\3\0\7\4\2\u0121\6\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\11\0\1\u0122"+
    "\77\0\3\4\3\0\1\4\3\0\14\4\2\u0123\1\4"+
    "\1\0\23\4\1\0\7\4\13\0\1\4\46\0\1\u0124"+
    "\70\0\2\u0125\71\0\1\u0126\111\0\2\u0127\141\0\1\u0128"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14559];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\31\1\6\11\1\0\1\1"+
    "\1\0\2\11\16\1\1\0\11\1\1\0\4\1\2\0"+
    "\7\1\3\0\11\1\10\11\3\1\1\0\2\1\2\0"+
    "\6\1\1\0\6\1\1\11\3\1\1\0\1\11\5\1"+
    "\1\0\2\1\1\0\1\1\3\0\14\1\1\0\2\1"+
    "\2\0\6\1\1\0\7\1\1\0\4\1\1\0\2\1"+
    "\1\11\1\1\3\0\6\1\1\0\3\1\1\0\2\1"+
    "\1\11\5\1\1\0\1\1\1\11\5\1\1\0\4\1"+
    "\1\11\2\1\1\0\1\11\1\0\5\1\1\11\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\5\1\1\0\3\1"+
    "\1\0\1\1\2\11\3\1\1\0\1\1\1\0\1\1"+
    "\2\0\4\1\1\0\2\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\11\2\1\1\0\2\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
            }
          case 83: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" num"); return new Symbol(Simbolos.num, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 3: 
            { System.out.println("Reconocio "+yytext()+" id"); return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.comilla, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 5: 
            { /* Espacios en blanco, se ignoran */
            }
          case 87: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.p, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.asignacion, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 12: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.mod, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.para, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.parc, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.ptoYcoma, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.comilla1, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.dolar, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" decimal"); return new Symbol(Simbolos.decimal, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.asignpor, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h1, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h2, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h3, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 26: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h4, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 27: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h5, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 28: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h6, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 29: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.hr, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.th, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.td, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 32: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.tr, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 33: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.br, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 34: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.or, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 35: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.menorQ, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 36: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 37: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.mayorQ, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 38: 
            { System.out.println("Reconocio "+yytext()+" ptoYcoma"); return new Symbol(Simbolos.distinto, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 39: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.asignmas, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 40: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.masmas, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 41: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.asignmenos, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 42: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.menosmenos, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 43: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.and, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 44: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.divhtml, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 45: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.intt, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 46: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 47: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.html, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 48: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.head, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 49: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.truee, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 50: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.azul, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 51: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.body, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 52: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.rojo, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 53: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.gris, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 54: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.charr, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 55: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.font, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 56: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.table, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 57: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.title, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 58: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t4, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 59: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.align, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 60: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.verde, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 61: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.print, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 62: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t5, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 63: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.color, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 64: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.falsee, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 65: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t8, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 66: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.morado, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 67: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.doublee, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 68: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t7, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 69: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.stringg, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 70: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t6, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 71: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.derecha, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 72: 
            { System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.booleann, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 73: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t1, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 74: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t10, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 75: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.amarillo, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 76: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.centrado, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 77: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t9, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 78: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t3, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 79: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.textocolor, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 80: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.izquierda, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 81: 
            { System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.anaranjado, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 82: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t2, yycolumn, yyline, yytext());
            }
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

/* The following code was generated by JFlex 1.6.1 */

/****************************************  1ra Area: Codigo de Usuario *******************************************/
//------> Paquetes,importaciones
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import ErroresLexicosSintacticos.Token;


/*************************************  2da Area: Opciones y Declaraciones **************************************/

public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 58,  5, 59, 58, 58,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    55, 46,  4,  0, 57, 49,  0,  6, 50, 51,  8, 47, 53, 48,  3,  7, 
     1, 27, 28, 29, 30, 31, 32,  1,  1,  1,  0, 52, 18, 45, 21,  0, 
     0, 19, 20, 39, 22, 10, 41, 37, 16, 26, 35,  2, 14, 17, 38, 23, 
    34, 42,  9, 12, 15, 13, 33, 56, 40, 24, 36, 43,  0, 44,  0,  2, 
     0, 19, 20, 39, 22, 10, 41, 37, 16, 26, 35,  2, 14, 17, 38, 23, 
    34, 42,  9, 12, 15, 13, 33, 56, 40, 24, 36,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 59,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\3\1\1\4\3\1\11\2\3\1\12"+
    "\2\3\1\1\2\3\1\13\4\3\1\14\1\15\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\0\1\30\1\0\1\31\1\0\1\32"+
    "\2\3\3\0\3\3\1\33\1\3\1\34\1\3\1\35"+
    "\1\0\2\3\1\36\2\3\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\3\2\0\1\45\4\3\1\46\1\3"+
    "\1\47\2\3\1\0\1\3\1\50\2\0\15\3\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\0\3\3"+
    "\3\0\6\3\2\0\2\3\1\0\5\3\4\0\4\3"+
    "\1\60\4\3\2\61\1\0\1\62\1\3\1\62\1\3"+
    "\1\0\1\3\1\0\2\3\1\63\6\3\1\0\2\3"+
    "\1\64\3\0\3\3\1\65\2\3\2\0\2\3\1\0"+
    "\1\3\1\66\1\67\2\3\3\0\1\70\1\71\1\0"+
    "\2\3\1\72\1\3\1\73\3\3\1\0\2\3\1\0"+
    "\1\3\2\74\2\3\1\75\2\3\1\0\1\3\1\76"+
    "\1\0\2\3\1\77\2\0\1\77\3\3\1\100\1\101"+
    "\1\102\1\101\1\102\1\0\3\3\1\103\1\0\1\104"+
    "\2\105\1\0\5\3\1\0\1\3\1\106\1\3\2\107"+
    "\2\3\1\110\1\111\2\112\2\113\1\114\1\115\1\116"+
    "\1\115\1\116\1\3\2\0\1\3\1\117\1\120\2\0"+
    "\4\3\1\121\1\0\2\3\1\0\3\3\3\0\1\3"+
    "\2\0\2\3\1\122\1\123\1\0\1\3\1\124\2\125"+
    "\2\3\3\0\1\3\1\126\2\127\1\3\1\0\1\3"+
    "\1\130\1\131\1\0\1\132\2\133\1\3\2\134\1\0"+
    "\1\135\4\0\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\74\0\u0168"+
    "\0\74\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\74\0\74"+
    "\0\u0690\0\u06cc\0\u0708\0\u0744\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\360\0\360\0\u012c\0\74\0\u0780"+
    "\0\74\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\264\0\u0a14\0\264\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\264\0\u0b04\0\u0b40\0\264\0\264\0\264\0\264"+
    "\0\264\0\264\0\u0b7c\0\u0bb8\0\u0bf4\0\74\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\264\0\u0d20\0\74\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\264\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734"+
    "\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\264"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\74\0\264\0\u1a04\0\74"+
    "\0\u1a40\0\264\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8"+
    "\0\264\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c"+
    "\0\u1d88\0\u1dc4\0\264\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\264\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u20d0\0\u210c\0\264\0\264\0\u2148\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\74\0\74\0\u2274\0\u22b0\0\u22ec\0\264\0\u2328"+
    "\0\264\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\74\0\264\0\u2544\0\u2580\0\264\0\u25bc\0\u25f8"+
    "\0\u2634\0\u2670\0\264\0\u26ac\0\u26e8\0\u2724\0\74\0\u2760"+
    "\0\u279c\0\264\0\u27d8\0\u2814\0\u2850\0\264\0\74\0\u288c"+
    "\0\264\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\74\0\u29f4"+
    "\0\74\0\74\0\264\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\u2b5c\0\u2b98\0\u2bd4\0\264\0\u2c10\0\74\0\264\0\u2c4c"+
    "\0\u2c88\0\264\0\264\0\74\0\264\0\74\0\264\0\264"+
    "\0\74\0\74\0\264\0\264\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78"+
    "\0\264\0\264\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\264\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264"+
    "\0\264\0\264\0\u32a0\0\u32dc\0\264\0\74\0\264\0\u3318"+
    "\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\74\0\74\0\264"+
    "\0\u3480\0\u34bc\0\u34f8\0\264\0\264\0\u3534\0\74\0\74"+
    "\0\264\0\u3570\0\74\0\264\0\u35ac\0\264\0\u35e8\0\u3624"+
    "\0\u3660\0\u369c\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\4\1\14\1\15\2\4\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\4"+
    "\1\27\1\30\6\3\1\31\1\32\2\4\1\33\1\34"+
    "\1\35\1\4\1\36\1\4\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\7\1\4\1\53\1\7\76\0\1\3\1\0\1\54"+
    "\27\0\6\3\34\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\1\55\31\0\6\55\33\0\4\56\1\57\1\0"+
    "\66\56\1\0\2\60\6\0\2\60\1\0\6\60\1\0"+
    "\2\60\1\0\3\60\1\0\21\60\15\0\1\60\60\0"+
    "\1\61\17\0\2\4\6\0\1\4\1\62\1\0\6\4"+
    "\1\0\2\4\1\0\1\4\1\63\1\4\1\0\21\4"+
    "\15\0\1\4\20\0\1\64\1\0\1\65\27\0\1\66"+
    "\25\0\2\4\6\0\2\4\1\0\1\4\1\67\1\4"+
    "\1\70\2\4\1\0\2\4\1\0\3\4\1\0\15\4"+
    "\1\71\3\4\15\0\1\4\4\0\2\4\6\0\1\72"+
    "\1\73\1\0\4\4\1\74\1\4\1\0\1\75\1\4"+
    "\1\0\1\76\2\4\1\77\1\100\20\4\15\0\1\101"+
    "\4\0\2\4\6\0\1\102\1\103\1\0\3\4\1\104"+
    "\2\4\1\0\2\4\1\0\3\4\1\0\1\4\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\12\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\1\4\1\113\1\4\1\0\21\4\15\0\1\4"+
    "\12\0\1\114\7\0\1\115\35\0\1\116\17\0\2\4"+
    "\6\0\2\4\1\0\2\4\1\117\2\4\1\120\1\0"+
    "\2\4\1\0\3\4\1\0\12\4\1\121\1\4\1\122"+
    "\4\4\15\0\1\4\4\0\2\4\6\0\1\123\1\4"+
    "\1\0\6\4\1\0\2\4\1\0\1\4\1\124\1\4"+
    "\1\0\21\4\15\0\1\4\60\0\1\125\17\0\2\4"+
    "\6\0\1\4\1\126\1\0\6\4\1\0\2\4\1\0"+
    "\1\4\1\127\1\4\1\130\1\131\20\4\15\0\1\4"+
    "\4\0\2\4\6\0\1\132\1\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\47\0"+
    "\1\133\1\0\1\134\26\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\0\12\4\1\135"+
    "\1\4\1\136\4\4\15\0\1\4\4\0\2\4\6\0"+
    "\1\4\1\137\1\0\6\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\1\140"+
    "\1\4\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\1\141\1\142"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\4\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\1\4\1\143\1\4\1\0\21\4"+
    "\15\0\1\4\4\0\2\4\6\0\1\4\1\144\1\0"+
    "\4\4\1\145\1\4\1\0\2\4\1\0\1\4\1\146"+
    "\1\4\1\0\21\4\15\0\1\4\4\0\2\4\6\0"+
    "\2\4\1\0\2\4\1\147\3\4\1\0\1\150\1\4"+
    "\1\0\1\4\1\151\1\4\1\0\21\4\15\0\1\4"+
    "\60\0\1\152\73\0\1\153\73\0\1\154\1\0\1\155"+
    "\71\0\1\156\2\0\1\157\21\0\1\160\66\0\2\4"+
    "\6\0\2\4\1\161\1\162\5\4\1\0\2\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\4\0\2\4\6\0"+
    "\2\4\1\0\5\4\1\163\1\0\2\4\1\0\3\4"+
    "\1\0\11\4\1\164\7\4\15\0\1\4\34\0\2\165"+
    "\52\0\1\166\73\0\1\167\63\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\165\1\170"+
    "\20\4\15\0\1\4\4\0\2\4\6\0\1\171\1\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\4\0\2\4\6\0\1\172\1\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\1\4\1\173"+
    "\4\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\16\4\1\174\2\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\1\4\1\175\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\22\0\1\176\1\0\1\177\53\0\2\4\6\0\2\4"+
    "\1\0\3\4\1\200\1\4\1\201\1\0\2\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\4\0\2\4\6\0"+
    "\2\4\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\14\0\1\202\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\2\4\1\203\3\4\1\0\1\204\1\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\4\0\2\4\6\0"+
    "\2\4\1\0\5\4\1\205\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\1\206"+
    "\1\4\1\0\6\4\1\0\2\4\1\0\1\207\2\4"+
    "\1\0\21\4\15\0\1\4\22\0\1\210\74\0\1\211"+
    "\5\0\1\212\46\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\3\4\1\213\1\214\20\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\1\215\1\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\1\4\1\216\4\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\1\217"+
    "\1\4\1\0\1\220\2\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\1\221\1\222\1\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\1\223\1\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\1\4\1\224\4\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\44\0"+
    "\1\225\33\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\7\4\1\226\11\4\15\0"+
    "\1\4\55\0\1\227\40\0\1\230\55\0\2\4\6\0"+
    "\2\4\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\20\4\1\231\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\3\4\1\232\2\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\1\233"+
    "\1\4\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\234\1\235\20\4"+
    "\15\0\1\4\4\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\3\4\1\236\1\237\20\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\1\4\1\240\1\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\3\4\1\241"+
    "\2\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\14\4\1\242\4\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\1\243\1\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\2\4\1\244\3\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\1\4\1\245\1\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\2\4\1\246\3\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\14\4\1\247\4\4\15\0\1\4"+
    "\20\0\1\250\57\0\2\4\6\0\2\4\1\0\1\4"+
    "\1\251\4\4\1\0\2\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\4\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\1\252\1\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\1\4\1\253\1\4\1\0\21\4\15\0"+
    "\1\4\47\0\1\254\60\0\2\255\72\0\2\256\42\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\2\4\1\0"+
    "\3\4\1\0\12\4\1\257\6\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\2\4\1\0"+
    "\3\4\1\255\1\260\20\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\0\6\4\1\0\2\4\1\0\3\4"+
    "\1\256\1\261\20\4\15\0\1\4\4\0\2\4\6\0"+
    "\1\4\1\262\1\0\6\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\3\4\1\263\2\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\2\4\1\264\3\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\21\0\1\265\67\0\1\266"+
    "\62\0\2\4\6\0\2\4\1\0\2\4\1\267\3\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\1\4\1\270\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\52\0"+
    "\1\271\25\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\7\4\1\272\11\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\1\273\2\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\2\4\1\274\3\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\1\275"+
    "\1\4\1\0\3\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\1\4\1\276\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\23\0\1\277"+
    "\2\0\1\300\2\0\1\301\72\0\1\302\73\0\1\303"+
    "\113\0\1\304\27\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\3\4\1\0\13\4\1\305\5\4"+
    "\15\0\1\4\4\0\2\4\6\0\1\306\1\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\2\4\1\307"+
    "\3\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\1\310\1\4\1\0\6\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\2\4\1\311\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\2\4\1\312\3\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\1\4\1\313\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\0\6\4\1\0\1\4\1\314\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\20\0\1\315\57\0"+
    "\2\4\6\0\2\4\1\0\1\4\1\316\4\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\2\4\1\0"+
    "\1\317\2\4\1\0\21\4\15\0\1\4\51\0\1\320"+
    "\26\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\14\4\1\321\4\4\15\0\1\4"+
    "\16\0\2\322\60\0\2\4\6\0\2\4\1\322\1\323"+
    "\5\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\1\324\1\4\1\0\6\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\3\4\1\325\2\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\1\326\1\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\2\4\1\0"+
    "\1\4\1\327\1\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\1\330\1\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\331\1\332\5\4\1\0\2\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\4\0\2\4\6\0"+
    "\2\4\1\0\3\4\1\333\2\4\1\0\2\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\21\0\1\334\56\0"+
    "\2\4\6\0\2\4\1\0\2\4\1\335\3\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\2\4\1\0"+
    "\3\4\1\0\14\4\1\336\4\4\15\0\1\4\26\0"+
    "\1\337\116\0\1\340\67\0\1\341\32\0\2\4\6\0"+
    "\2\4\1\0\6\4\1\0\1\342\1\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\14\4"+
    "\1\343\4\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\10\4"+
    "\1\344\10\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\15\4"+
    "\1\345\3\4\15\0\1\4\4\0\2\4\6\0\1\4"+
    "\1\346\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\15\0\1\347\74\0\2\350\60\0"+
    "\2\4\6\0\1\4\1\351\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\350\1\352\5\4\1\0\2\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\15\0\1\353\62\0"+
    "\2\4\6\0\1\4\1\354\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\0\6\4\1\0\2\4\1\0\1\355"+
    "\2\4\1\0\21\4\15\0\1\4\4\0\2\4\6\0"+
    "\1\356\1\4\1\0\6\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\30\0\1\357\72\0\1\360"+
    "\74\0\1\361\114\0\1\362\26\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\14\4"+
    "\1\363\4\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\364\1\365"+
    "\20\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\1\366\1\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\4\0\2\4\6\0\1\4\1\367\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\2\4\1\0\3\4\1\0\15\4\1\370\3\4\15\0"+
    "\1\4\4\0\2\4\6\0\2\4\1\0\2\4\1\371"+
    "\3\4\1\0\2\4\1\0\3\4\1\0\21\4\15\0"+
    "\1\4\34\0\2\372\42\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\372\1\373\20\4"+
    "\15\0\1\4\4\0\2\4\6\0\1\4\1\374\1\0"+
    "\6\4\1\0\1\375\1\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\22\0\1\376\55\0\2\4\6\0\2\4"+
    "\1\0\3\4\1\377\2\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\13\4"+
    "\1\u0100\5\4\15\0\1\4\4\0\2\4\6\0\1\u0101"+
    "\1\4\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\1\u0102\1\4"+
    "\1\0\6\4\1\0\2\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\4\0\2\4\6\0\2\4\1\0\3\4"+
    "\1\u0103\2\4\1\0\2\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\15\0\1\u0104\62\0\2\4\6\0\1\4"+
    "\1\u0105\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\22\0\1\u0106\55\0\2\4\6\0"+
    "\2\4\1\0\3\4\1\u0107\2\4\1\0\2\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\4\0\2\4\6\0"+
    "\2\4\1\0\6\4\1\0\1\u0108\1\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\50\0\1\u0109\45\0\1\u010a"+
    "\55\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\13\4\1\u010b\5\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\3\4\1\u010c\2\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\1\4\1\u010d\1\4\1\0\21\4\15\0\1\4"+
    "\72\0\1\u010e\5\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\3\4\1\0\21\4\14\0\1\u010e"+
    "\1\4\51\0\1\u010f\26\0\2\4\6\0\2\4\1\0"+
    "\3\4\1\u0110\2\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\1\4\1\u0111\1\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\0\14\4\1\u0112"+
    "\4\4\15\0\1\4\21\0\1\u0113\73\0\1\u0114\56\0"+
    "\2\4\6\0\2\4\1\0\2\4\1\u0115\3\4\1\0"+
    "\2\4\1\0\3\4\1\0\21\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\2\4\1\0"+
    "\3\4\1\0\14\4\1\u0116\4\4\15\0\1\4\4\0"+
    "\2\4\6\0\2\4\1\0\6\4\1\0\1\u0117\1\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\0\4\4\1\u0118\1\4\1\0\2\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\4\0\2\4"+
    "\6\0\1\4\1\u0119\1\0\6\4\1\0\2\4\1\0"+
    "\3\4\1\0\21\4\15\0\1\4\15\0\1\u011a\62\0"+
    "\2\4\6\0\1\4\1\u011b\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\21\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\0\6\4\1\0\2\4\1\0\3\4"+
    "\1\0\14\4\1\u011c\4\4\15\0\1\4\4\0\2\4"+
    "\6\0\2\4\1\0\6\4\1\0\2\4\1\0\3\4"+
    "\1\u011d\1\u011e\20\4\15\0\1\4\4\0\2\4\6\0"+
    "\2\4\1\0\6\4\1\0\1\u011f\1\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\2\4\1\u0120\3\4\1\0\2\4\1\0\3\4"+
    "\1\0\21\4\15\0\1\4\51\0\1\u0121\114\0\1\u0122"+
    "\5\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\u0123\1\u0124\20\4\15\0\1\4\15\0"+
    "\1\u0125\77\0\1\u0126\56\0\2\4\6\0\2\4\1\0"+
    "\2\4\1\u0127\3\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\0\11\4\1\u0128"+
    "\7\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\3\4\1\0\14\4\1\u0129"+
    "\4\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\1\u012a\1\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\14\0\1\u012b\63\0\2\4\6\0\1\u012c"+
    "\1\4\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\1\u012d\1\4\1\0\3\4\1\0\21\4"+
    "\15\0\1\4\26\0\1\u012e\51\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\1\u012f\1\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\4\0\2\4\6\0\2\4\1\0"+
    "\6\4\1\0\2\4\1\0\1\u0130\2\4\1\0\21\4"+
    "\15\0\1\4\4\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\1\4\1\u0131\1\4\1\0\21\4"+
    "\15\0\1\4\15\0\1\u0132\102\0\1\u0133\121\0\1\u0134"+
    "\25\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\3\4\1\0\15\4\1\u0135\3\4\15\0\1\4"+
    "\30\0\1\u0136\75\0\1\u0137\45\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\1\4\1\u0138\1\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\1\u0139\1\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\31\0\1\u013a\46\0\2\4\6\0"+
    "\2\4\1\0\6\4\1\0\2\4\1\0\1\u013b\2\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\2\4"+
    "\1\0\6\4\1\0\2\4\1\0\1\4\1\u013c\1\4"+
    "\1\0\21\4\15\0\1\4\4\0\2\4\6\0\1\u013d"+
    "\1\4\1\0\6\4\1\0\2\4\1\0\3\4\1\0"+
    "\21\4\15\0\1\4\73\0\1\u013e\22\0\1\u013f\77\0"+
    "\1\u0140\51\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\1\u0141\1\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\4\0\2\4\6\0\2\4\1\0\6\4\1\0\2\4"+
    "\1\0\1\u0142\2\4\1\0\21\4\15\0\1\4\26\0"+
    "\1\u0143\51\0\2\4\6\0\2\4\1\0\6\4\1\0"+
    "\1\u0144\1\4\1\0\3\4\1\0\21\4\15\0\1\4"+
    "\72\0\1\u0145\5\0\2\4\6\0\2\4\1\0\6\4"+
    "\1\0\2\4\1\0\1\4\1\u0146\1\4\1\0\21\4"+
    "\15\0\1\4\14\0\1\u0147\111\0\1\u0148\65\0\1\u0149"+
    "\75\0\1\u014a\116\0\1\u014b\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14040];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\25\1\2\11"+
    "\4\1\7\11\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\2\1\3\0\10\1\1\0\14\1\2\0\1\11\6\1"+
    "\1\11\2\1\1\0\2\1\2\0\15\1\7\11\1\0"+
    "\3\1\3\0\6\1\2\0\2\1\1\0\5\1\4\0"+
    "\11\1\1\11\1\1\1\0\1\11\3\1\1\0\1\1"+
    "\1\0\11\1\1\0\3\1\3\0\6\1\2\0\2\1"+
    "\1\0\5\1\3\0\2\11\1\0\10\1\1\0\2\1"+
    "\1\0\1\1\1\11\6\1\1\0\2\1\1\0\2\1"+
    "\1\11\2\0\5\1\1\11\3\1\1\0\3\1\1\11"+
    "\1\0\2\11\1\1\1\0\5\1\1\0\3\1\1\11"+
    "\5\1\1\11\1\1\1\11\2\1\2\11\3\1\2\0"+
    "\3\1\2\0\5\1\1\0\2\1\1\0\3\1\3\0"+
    "\1\1\2\0\4\1\1\0\2\1\1\11\3\1\3\0"+
    "\1\1\2\11\2\1\1\0\3\1\1\0\2\11\2\1"+
    "\1\11\1\1\1\0\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[331];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
  ArrayList<Token> arrayTokens = new ArrayList<Token>();
    Token miToken;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico"+yytext()+" Linea "+yyline+" Columna "+yycolumn);
            }
          case 95: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" num"); return new Symbol(Simbolos.num, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 3: 
            { System.out.println("Reconocio "+yytext()+" id"); return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 4: 
            { miToken = new Token("pto",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.pto, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 5: 
            { miToken = new Token("Comilla",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.comilla, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 6: 
            { /* Espacios en blanco, se ignoran */
            }
          case 100: break;
          case 7: 
            { miToken = new Token("div",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 8: 
            { miToken = new Token("por",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 9: 
            { miToken = new Token("menor",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.menor, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 10: 
            { miToken = new Token("myor",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.mayor, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 11: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.p, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 12: 
            { miToken = new Token("cora",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.cora, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 13: 
            { miToken = new Token("corc",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.corc, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 14: 
            { miToken = new Token("asignacion",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.asignacion, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 15: 
            { miToken = new Token("mas",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 16: 
            { miToken = new Token("menos",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 17: 
            { miToken = new Token("mod",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.mod, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 18: 
            { miToken = new Token("para",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" para"); return new Symbol(Simbolos.para, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 19: 
            { miToken = new Token("parc",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" parc"); return new Symbol(Simbolos.parc, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 20: 
            { miToken = new Token("ptoYcoma",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" ptoYcoma"); return new Symbol(Simbolos.ptoYcoma, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 21: 
            { miToken = new Token("coma",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 22: 
            { miToken = new Token("Comilla",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.comilla1, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 23: 
            { miToken = new Token("Dolar",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Dolar"); return new Symbol(Simbolos.dolar, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" decimal"); return new Symbol(Simbolos.decimal, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(Simbolos.cadena, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 26: 
            { miToken = new Token("incrPor",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.asignpor, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 27: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.tr, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 28: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.th, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 29: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.td, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 30: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.hr, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 31: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h1, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 32: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h2, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 33: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h3, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 34: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h4, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 35: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h5, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 36: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.h6, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 37: 
            { miToken = new Token("menorQ",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.menorQ, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 38: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.br, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 39: 
            { miToken = new Token("mayorQ",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.mayorQ, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 40: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.or, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 41: 
            { miToken = new Token("igual",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 42: 
            { miToken = new Token("distinto",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" ptoYcoma"); return new Symbol(Simbolos.distinto, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 43: 
            { miToken = new Token("decreMas",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" plusplus"); return new Symbol(Simbolos.asignmas, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 44: 
            { miToken = new Token("masMas",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.masmas, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 45: 
            { miToken = new Token("decrMenos",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.asignmenos, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 46: 
            { miToken = new Token("menosMenos",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.menosmenos, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 47: 
            { System.out.println("Reconocio "+yytext()+" cadena"); return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 48: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.and, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 49: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.divhtml, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 50: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.intt, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 51: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 52: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.rojo, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 53: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.truee, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 54: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.head, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 55: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.html, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 56: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.tha, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 57: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.tda, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 58: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.azul, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 59: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.body, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 60: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.gris, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 61: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.charr, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 62: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.font, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 63: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t5, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 64: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.table, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 65: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.title, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 66: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t4, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 67: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.thc, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 68: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.tdc, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 69: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.align, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 70: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.verde, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 71: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.print, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 72: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.color, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 73: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.floaat, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 74: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.falsee, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 75: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.result, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 76: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t7, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 77: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.stringg, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 78: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t6, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 79: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.morado, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 80: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t8, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 81: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.doublee, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 82: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" dosPtos"); return new Symbol(Simbolos.booleann, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 83: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.derecha, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 84: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t1, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 85: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t10, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 86: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.ctable, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 87: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.amarillo, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 88: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.centrado, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 89: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.textocolor, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 90: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t3, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 91: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t9, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 92: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.izquierda, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 93: 
            { miToken = new Token("Reservada",yytext(),yyline+1, yycolumn);
                       arrayTokens.add(miToken);
                       System.out.println("Reconocio "+yytext()+" Reservada"); return new Symbol(Simbolos.anaranjado, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 94: 
            { System.out.println("Reconocio "+yytext()+" pto"); return new Symbol(Simbolos.t2, yycolumn, yyline, yytext());
            }
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 01 06:39:23 CST 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 01 06:39:23 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\003\000\002\004" +
    "\006\000\002\005\013\000\002\006\012\000\002\014\016" +
    "\000\002\014\015\000\002\007\004\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\030\013\000\002\030\012\000\002\030\012\000\002\030" +
    "\011\000\002\012\013\000\002\012\012\000\002\012\012" +
    "\000\002\012\011\000\002\012\013\000\002\012\012\000" +
    "\002\012\012\000\002\012\011\000\002\012\013\000\002" +
    "\012\012\000\002\012\012\000\002\012\011\000\002\012" +
    "\013\000\002\012\012\000\002\012\012\000\002\012\011" +
    "\000\002\012\013\000\002\012\012\000\002\012\012\000" +
    "\002\012\011\000\002\012\013\000\002\012\012\000\002" +
    "\012\012\000\002\012\011\000\002\026\004\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\007\000\002\033\004\000\002\033\003\000" +
    "\002\034\007\000\002\034\005\000\002\034\004\000\002" +
    "\036\005\000\002\036\006\000\002\036\003\000\002\036" +
    "\004\000\002\037\004\000\002\037\004\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\004\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\023\004\000\002\023\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\016\005\000\002\017\003\000\002\017\003\000\002" +
    "\024\005\000\002\022\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\004" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\005\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\063\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\065\011\001\002\000" +
    "\004\063\013\001\002\000\004\002\uffff\001\002\000\004" +
    "\005\014\001\002\000\004\065\015\001\002\000\004\063" +
    "\016\001\002\000\004\015\u012c\001\002\000\004\063\020" +
    "\001\002\000\004\031\021\001\002\000\004\005\022\001" +
    "\002\000\004\065\023\001\002\000\004\063\025\001\002" +
    "\000\004\002\ufffe\001\002\000\004\006\026\001\002\000" +
    "\004\065\027\001\002\000\004\063\034\001\002\000\004" +
    "\063\u0124\001\002\000\004\063\ufff9\001\002\000\004\063" +
    "\ufff7\001\002\000\004\063\ufff6\001\002\000\024\007\044" +
    "\010\043\011\042\012\041\013\040\014\037\023\036\024" +
    "\045\031\035\001\002\000\004\006\u011d\001\002\000\014" +
    "\057\054\060\051\061\056\062\050\065\u0109\001\002\000" +
    "\014\057\054\060\051\061\056\062\050\065\364\001\002" +
    "\000\014\057\054\060\051\061\056\062\050\065\337\001" +
    "\002\000\014\057\054\060\051\061\056\062\050\065\312" +
    "\001\002\000\014\057\054\060\051\061\056\062\050\065" +
    "\265\001\002\000\014\057\054\060\051\061\056\062\050" +
    "\065\240\001\002\000\014\057\054\060\051\061\056\062" +
    "\050\065\061\001\002\000\004\065\046\001\002\000\004" +
    "\063\ufff8\001\002\000\014\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\065\uffba\001\002\000\004\071\235\001\002\000\004" +
    "\071\uffb5\001\002\000\004\071\233\001\002\000\014\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\065\uffb9\001\002\000\004" +
    "\071\uffb6\001\002\000\014\057\uffb8\060\uffb8\061\uffb8\062" +
    "\uffb8\065\uffb8\001\002\000\004\071\231\001\002\000\014" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\065\uffbb\001\002\000" +
    "\014\057\054\060\051\061\056\062\050\065\217\001\002" +
    "\000\014\036\067\063\066\102\070\103\064\127\063\001" +
    "\002\000\014\036\067\063\212\102\070\103\064\127\063" +
    "\001\002\000\004\127\074\001\002\000\014\036\uffd6\063" +
    "\uffd6\102\uffd6\103\uffd6\127\uffd6\001\002\000\014\036\uffd8" +
    "\063\uffd8\102\uffd8\103\uffd8\127\uffd8\001\002\000\004\031" +
    "\071\001\002\000\014\036\uffd5\063\uffd5\102\uffd5\103\uffd5" +
    "\127\uffd5\001\002\000\014\036\uffd7\063\uffd7\102\uffd7\103" +
    "\uffd7\127\uffd7\001\002\000\004\007\072\001\002\000\004" +
    "\065\073\001\002\000\004\063\uffee\001\002\000\022\072" +
    "\100\073\107\074\103\075\106\076\104\102\101\104\075" +
    "\106\102\001\002\000\004\033\205\001\002\000\004\102" +
    "\101\001\002\000\024\072\100\073\107\074\103\075\106" +
    "\076\104\102\101\104\075\106\102\127\200\001\002\000" +
    "\004\102\uffa5\001\002\000\010\035\uffcc\037\uffcc\071\115" +
    "\001\002\000\004\102\uffa0\001\002\000\004\102\uffa3\001" +
    "\002\000\004\102\uffa1\001\002\000\006\035\111\037\112" +
    "\001\002\000\004\102\uffa2\001\002\000\004\102\uffa4\001" +
    "\002\000\024\072\uffd2\073\uffd2\074\uffd2\075\uffd2\076\uffd2" +
    "\102\uffd2\104\uffd2\106\uffd2\127\uffd2\001\002\000\024\072" +
    "\uffcf\073\uffcf\074\uffcf\075\uffcf\076\uffcf\102\uffcf\104\uffcf" +
    "\106\uffcf\127\uffcf\001\002\000\004\102\113\001\002\000" +
    "\010\035\uffce\037\uffce\071\115\001\002\000\006\035\uffcd" +
    "\037\uffcd\001\002\000\026\027\125\033\131\036\126\042" +
    "\121\077\116\100\120\101\124\102\117\103\122\105\123" +
    "\001\002\000\044\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\041\uffa8\063\uffa8" +
    "\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\001" +
    "\002\000\044\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\034\uffac\035\uffac\037\uffac\040\uffac\041\uffac\063\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\001\002" +
    "\000\044\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\034" +
    "\uffa7\035\uffa7\037\uffa7\040\uffa7\041\uffa7\063\uffa7\064\uffa7" +
    "\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\001\002\000" +
    "\026\027\125\033\131\036\126\042\121\077\116\100\120" +
    "\101\124\102\117\103\122\105\123\001\002\000\044\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\034\uffab\035\uffab" +
    "\037\uffab\040\uffab\041\uffab\063\uffab\064\uffab\065\uffab\066" +
    "\uffab\067\uffab\070\uffab\071\uffab\001\002\000\044\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\071\uffaa\001\002\000\044\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad\037\uffad" +
    "\040\uffad\041\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\071\uffad\001\002\000\024\027\125\033\156" +
    "\036\126\077\116\100\120\101\124\102\117\103\122\105" +
    "\123\001\002\000\044\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\041\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9" +
    "\001\002\000\036\026\153\027\143\030\150\031\141\032" +
    "\147\035\uffca\037\uffca\063\144\064\151\065\152\066\142" +
    "\067\154\070\146\071\145\001\002\000\012\035\uffc9\037" +
    "\uffc9\040\134\041\135\001\002\000\026\027\125\033\131" +
    "\036\126\042\121\077\116\100\120\101\124\102\117\103" +
    "\122\105\123\001\002\000\034\026\153\027\143\030\150" +
    "\031\141\032\147\034\160\063\144\064\151\065\152\066" +
    "\142\067\154\070\146\071\145\001\002\000\010\034\136" +
    "\040\134\041\135\001\002\000\026\027\125\033\131\036" +
    "\126\042\121\077\116\100\120\101\124\102\117\103\122" +
    "\105\123\001\002\000\026\027\125\033\131\036\126\042" +
    "\121\077\116\100\120\101\124\102\117\103\122\105\123" +
    "\001\002\000\014\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\001\002\000\032\026\153\027\143\030\150\031\141" +
    "\032\147\063\144\064\151\065\152\066\142\067\154\070" +
    "\146\071\145\001\002\000\014\034\uffbe\035\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\001\002\000\024\027\125\033\156\036" +
    "\126\077\116\100\120\101\124\102\117\103\122\105\123" +
    "\001\002\000\024\027\125\033\156\036\126\077\116\100" +
    "\120\101\124\102\117\103\122\105\123\001\002\000\024" +
    "\027\125\033\156\036\126\077\116\100\120\101\124\102" +
    "\117\103\122\105\123\001\002\000\024\027\125\033\156" +
    "\036\126\077\116\100\120\101\124\102\117\103\122\105" +
    "\123\001\002\000\024\027\125\033\156\036\126\077\116" +
    "\100\120\101\124\102\117\103\122\105\123\001\002\000" +
    "\024\027\125\033\156\036\126\077\116\100\120\101\124" +
    "\102\117\103\122\105\123\001\002\000\024\027\125\033" +
    "\156\036\126\077\116\100\120\101\124\102\117\103\122" +
    "\105\123\001\002\000\024\027\125\033\156\036\126\077" +
    "\116\100\120\101\124\102\117\103\122\105\123\001\002" +
    "\000\024\027\125\033\156\036\126\077\116\100\120\101" +
    "\124\102\117\103\122\105\123\001\002\000\024\027\125" +
    "\033\156\036\126\077\116\100\120\101\124\102\117\103" +
    "\122\105\123\001\002\000\024\027\125\033\156\036\126" +
    "\077\116\100\120\101\124\102\117\103\122\105\123\001" +
    "\002\000\024\027\125\033\156\036\126\077\116\100\120" +
    "\101\124\102\117\103\122\105\123\001\002\000\024\026" +
    "\153\027\143\030\150\031\141\034\uffc4\035\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\001\002\000\024\027\125\033\156\036" +
    "\126\077\116\100\120\101\124\102\117\103\122\105\123" +
    "\001\002\000\014\026\153\027\143\030\150\031\141\034" +
    "\160\001\002\000\044\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\041\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\001\002\000\044\026\uffb2\027\uffb2\030\150\031\141\032" +
    "\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\001" +
    "\002\000\024\026\153\027\143\030\150\031\141\034\uffc8" +
    "\035\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002\000\024\026" +
    "\153\027\143\030\150\031\141\034\uffc5\035\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\001\002\000\044\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0" +
    "\041\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\070" +
    "\uffb0\071\uffb0\001\002\000\024\026\153\027\143\030\150" +
    "\031\141\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\001" +
    "\002\000\024\026\153\027\143\030\150\031\141\034\uffc3" +
    "\035\uffc3\037\uffc3\040\uffc3\041\uffc3\001\002\000\024\026" +
    "\153\027\143\030\150\031\141\034\uffc2\035\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\001\002\000\024\026\153\027\143\030" +
    "\150\031\141\034\uffc7\035\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\001\002\000\044\026\uffb1\027\uffb1\030\150\031\141\032" +
    "\uffb1\034\uffb1\035\uffb1\037\uffb1\040\uffb1\041\uffb1\063\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\001" +
    "\002\000\024\026\153\027\143\030\150\031\141\034\uffc6" +
    "\035\uffc6\037\uffc6\040\uffc6\041\uffc6\001\002\000\044\026" +
    "\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034\uffaf\035\uffaf" +
    "\037\uffaf\040\uffaf\041\uffaf\063\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\001\002\000\014\034\uffbf" +
    "\035\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002\000\044\026" +
    "\uffae\027\uffae\030\150\031\141\032\uffae\034\uffae\035\uffae" +
    "\037\uffae\040\uffae\041\uffae\063\uffae\064\uffae\065\uffae\066" +
    "\uffae\067\uffae\070\uffae\071\uffae\001\002\000\014\034\uffc0" +
    "\035\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000\006\035" +
    "\uffcb\037\uffcb\001\002\000\004\127\202\001\002\000\024" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\076\uffd3\102\uffd3\104" +
    "\uffd3\106\uffd3\127\uffd3\001\002\000\014\036\uffd4\063\uffd4" +
    "\102\uffd4\103\uffd4\127\uffd4\001\002\000\006\035\204\037" +
    "\112\001\002\000\024\072\uffd0\073\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\102\uffd0\104\uffd0\106\uffd0\127\uffd0\001\002\000" +
    "\024\027\125\033\156\036\126\077\116\100\120\101\124" +
    "\102\117\103\122\105\123\001\002\000\014\026\153\027" +
    "\143\030\150\031\141\034\207\001\002\000\004\035\210" +
    "\001\002\000\024\072\uffd1\073\uffd1\074\uffd1\075\uffd1\076" +
    "\uffd1\102\uffd1\104\uffd1\106\uffd1\127\uffd1\001\002\000\014" +
    "\036\uffd9\063\uffd9\102\uffd9\103\uffd9\127\uffd9\001\002\000" +
    "\004\031\213\001\002\000\004\007\214\001\002\000\004" +
    "\065\215\001\002\000\004\063\ufff0\001\002\000\014\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\065\uffbc\001\002\000\014" +
    "\036\067\063\221\102\070\103\064\127\063\001\002\000" +
    "\014\036\067\063\225\102\070\103\064\127\063\001\002" +
    "\000\004\031\222\001\002\000\004\007\223\001\002\000" +
    "\004\065\224\001\002\000\004\063\uffef\001\002\000\004" +
    "\031\226\001\002\000\004\007\227\001\002\000\004\065" +
    "\230\001\002\000\004\063\ufff1\001\002\000\004\103\232" +
    "\001\002\000\014\057\uffb4\060\uffb4\061\uffb4\062\uffb4\065" +
    "\uffb4\001\002\000\004\103\234\001\002\000\014\057\uffb7" +
    "\060\uffb7\061\uffb7\062\uffb7\065\uffb7\001\002\000\004\103" +
    "\236\001\002\000\014\057\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\065\uffb3\001\002\000\014\057\054\060\051\061\056\062" +
    "\050\065\252\001\002\000\014\036\067\063\242\102\070" +
    "\103\064\127\063\001\002\000\014\036\067\063\246\102" +
    "\070\103\064\127\063\001\002\000\004\031\243\001\002" +
    "\000\004\010\244\001\002\000\004\065\245\001\002\000" +
    "\004\063\uffea\001\002\000\004\031\247\001\002\000\004" +
    "\010\250\001\002\000\004\065\251\001\002\000\004\063" +
    "\uffec\001\002\000\014\036\067\063\254\102\070\103\064" +
    "\127\063\001\002\000\014\036\067\063\260\102\070\103" +
    "\064\127\063\001\002\000\004\031\255\001\002\000\004" +
    "\010\256\001\002\000\004\065\257\001\002\000\004\063" +
    "\uffeb\001\002\000\004\031\261\001\002\000\004\010\262" +
    "\001\002\000\004\065\263\001\002\000\004\063\uffed\001" +
    "\002\000\014\057\054\060\051\061\056\062\050\065\277" +
    "\001\002\000\014\036\067\063\267\102\070\103\064\127" +
    "\063\001\002\000\014\036\067\063\273\102\070\103\064" +
    "\127\063\001\002\000\004\031\270\001\002\000\004\011" +
    "\271\001\002\000\004\065\272\001\002\000\004\063\uffe6" +
    "\001\002\000\004\031\274\001\002\000\004\011\275\001" +
    "\002\000\004\065\276\001\002\000\004\063\uffe8\001\002" +
    "\000\014\036\067\063\301\102\070\103\064\127\063\001" +
    "\002\000\014\036\067\063\305\102\070\103\064\127\063" +
    "\001\002\000\004\031\302\001\002\000\004\011\303\001" +
    "\002\000\004\065\304\001\002\000\004\063\uffe7\001\002" +
    "\000\004\031\306\001\002\000\004\011\307\001\002\000" +
    "\004\065\310\001\002\000\004\063\uffe9\001\002\000\014" +
    "\057\054\060\051\061\056\062\050\065\324\001\002\000" +
    "\014\036\067\063\314\102\070\103\064\127\063\001\002" +
    "\000\014\036\067\063\320\102\070\103\064\127\063\001" +
    "\002\000\004\031\315\001\002\000\004\012\316\001\002" +
    "\000\004\065\317\001\002\000\004\063\uffe2\001\002\000" +
    "\004\031\321\001\002\000\004\012\322\001\002\000\004" +
    "\065\323\001\002\000\004\063\uffe4\001\002\000\014\036" +
    "\067\063\326\102\070\103\064\127\063\001\002\000\014" +
    "\036\067\063\332\102\070\103\064\127\063\001\002\000" +
    "\004\031\327\001\002\000\004\012\330\001\002\000\004" +
    "\065\331\001\002\000\004\063\uffe3\001\002\000\004\031" +
    "\333\001\002\000\004\012\334\001\002\000\004\065\335" +
    "\001\002\000\004\063\uffe5\001\002\000\014\057\054\060" +
    "\051\061\056\062\050\065\351\001\002\000\014\036\067" +
    "\063\341\102\070\103\064\127\063\001\002\000\014\036" +
    "\067\063\345\102\070\103\064\127\063\001\002\000\004" +
    "\031\342\001\002\000\004\013\343\001\002\000\004\065" +
    "\344\001\002\000\004\063\uffde\001\002\000\004\031\346" +
    "\001\002\000\004\013\347\001\002\000\004\065\350\001" +
    "\002\000\004\063\uffe0\001\002\000\014\036\067\063\353" +
    "\102\070\103\064\127\063\001\002\000\014\036\067\063" +
    "\357\102\070\103\064\127\063\001\002\000\004\031\354" +
    "\001\002\000\004\013\355\001\002\000\004\065\356\001" +
    "\002\000\004\063\uffdf\001\002\000\004\031\360\001\002" +
    "\000\004\013\361\001\002\000\004\065\362\001\002\000" +
    "\004\063\uffe1\001\002\000\014\057\054\060\051\061\056" +
    "\062\050\065\376\001\002\000\014\036\067\063\366\102" +
    "\070\103\064\127\063\001\002\000\014\036\067\063\372" +
    "\102\070\103\064\127\063\001\002\000\004\031\367\001" +
    "\002\000\004\014\370\001\002\000\004\065\371\001\002" +
    "\000\004\063\uffda\001\002\000\004\031\373\001\002\000" +
    "\004\014\374\001\002\000\004\065\375\001\002\000\004" +
    "\063\uffdc\001\002\000\014\036\067\063\u0100\102\070\103" +
    "\064\127\063\001\002\000\014\036\067\063\u0104\102\070" +
    "\103\064\127\063\001\002\000\004\031\u0101\001\002\000" +
    "\004\014\u0102\001\002\000\004\065\u0103\001\002\000\004" +
    "\063\uffdb\001\002\000\004\031\u0105\001\002\000\004\014" +
    "\u0106\001\002\000\004\065\u0107\001\002\000\004\063\uffdd" +
    "\001\002\000\014\057\054\060\051\061\056\062\050\065" +
    "\u0113\001\002\000\014\036\067\063\u010b\102\070\103\064" +
    "\127\063\001\002\000\014\036\067\063\u010f\102\070\103" +
    "\064\127\063\001\002\000\004\031\u010c\001\002\000\004" +
    "\023\u010d\001\002\000\004\065\u010e\001\002\000\004\063" +
    "\ufff2\001\002\000\004\031\u0110\001\002\000\004\023\u0111" +
    "\001\002\000\004\065\u0112\001\002\000\004\063\ufff4\001" +
    "\002\000\014\036\067\063\u0115\102\070\103\064\127\063" +
    "\001\002\000\014\036\067\063\u0119\102\070\103\064\127" +
    "\063\001\002\000\004\031\u0116\001\002\000\004\023\u0117" +
    "\001\002\000\004\065\u0118\001\002\000\004\063\ufff3\001" +
    "\002\000\004\031\u011a\001\002\000\004\023\u011b\001\002" +
    "\000\004\065\u011c\001\002\000\004\063\ufff5\001\002\000" +
    "\004\065\u011e\001\002\000\004\063\u011f\001\002\000\004" +
    "\031\u0120\001\002\000\004\004\u0121\001\002\000\004\065" +
    "\u0122\001\002\000\004\002\ufffb\001\002\000\004\063\ufffa" +
    "\001\002\000\024\007\044\010\043\011\042\012\041\013" +
    "\040\014\037\023\036\024\045\031\u0125\001\002\000\004" +
    "\006\u0126\001\002\000\004\065\u0127\001\002\000\004\063" +
    "\u0128\001\002\000\004\031\u0129\001\002\000\004\004\u012a" +
    "\001\002\000\004\065\u012b\001\002\000\004\002\ufffc\001" +
    "\002\000\004\065\u012d\001\002\000\004\102\u012e\001\002" +
    "\000\004\063\u012f\001\002\000\004\031\u0130\001\002\000" +
    "\004\015\u0131\001\002\000\004\065\u0132\001\002\000\004" +
    "\063\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\006\002\005\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\027\010\030\012\031\030\032\001\001" +
    "\000\010\010\u0122\012\031\030\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\046\017\051\022\054\023" +
    "\u0107\024\052\025\056\001\001\000\016\016\046\017\051" +
    "\022\054\023\362\024\052\025\056\001\001\000\016\016" +
    "\046\017\051\022\054\023\335\024\052\025\056\001\001" +
    "\000\016\016\046\017\051\022\054\023\310\024\052\025" +
    "\056\001\001\000\016\016\046\017\051\022\054\023\263" +
    "\024\052\025\056\001\001\000\016\016\046\017\051\022" +
    "\054\023\236\024\052\025\056\001\001\000\016\016\046" +
    "\017\051\022\054\023\057\024\052\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\046\017\051\022\054\024" +
    "\052\025\215\001\001\000\006\026\061\027\064\001\001" +
    "\000\004\027\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\033\076\034\107\035\075\036\104" +
    "\001\001\000\002\001\001\000\004\036\202\001\001\000" +
    "\010\034\200\035\075\036\104\001\001\000\002\001\001" +
    "\000\004\037\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\113\001\001\000\002\001\001" +
    "\000\006\031\126\040\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\136\040\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\131\040\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\136" +
    "\040\173\001\001\000\006\031\136\040\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\172\001\001\000\004\031\171\001\001\000\004\031" +
    "\170\001\001\000\004\031\167\001\001\000\004\031\166" +
    "\001\001\000\004\031\165\001\001\000\004\031\164\001" +
    "\001\000\004\031\163\001\001\000\004\031\162\001\001" +
    "\000\004\031\161\001\001\000\004\031\160\001\001\000" +
    "\004\031\154\001\001\000\002\001\001\000\004\031\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\205\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\217\027\064\001\001\000\004\027" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\046\017\051" +
    "\022\054\024\052\025\215\001\001\000\006\026\240\027" +
    "\064\001\001\000\004\027\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\252\027\064\001\001\000\004\027" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\046" +
    "\017\051\022\054\024\052\025\215\001\001\000\006\026" +
    "\265\027\064\001\001\000\004\027\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\277\027\064\001\001\000" +
    "\004\027\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\046\017\051\022\054\024\052\025\215\001\001\000" +
    "\006\026\312\027\064\001\001\000\004\027\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\324\027\064\001" +
    "\001\000\004\027\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\046\017\051\022\054\024\052\025\215\001" +
    "\001\000\006\026\337\027\064\001\001\000\004\027\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\351\027" +
    "\064\001\001\000\004\027\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\046\017\051\022\054\024\052\025" +
    "\215\001\001\000\006\026\364\027\064\001\001\000\004" +
    "\027\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\376\027\064\001\001\000\004\027\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\046\017\051\022\054\024" +
    "\052\025\215\001\001\000\006\026\u0109\027\064\001\001" +
    "\000\004\027\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u0113\027\064\001\001\000\004\027\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }
    
    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NOMBRES_FUENTES ::= t10 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NOMBRES_FUENTES ::= t9 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NOMBRES_FUENTES ::= t8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NOMBRES_FUENTES ::= t7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NOMBRES_FUENTES ::= t6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NOMBRES_FUENTES ::= t5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NOMBRES_FUENTES ::= t4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NOMBRES_FUENTES ::= t3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NOMBRES_FUENTES ::= t2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NOMBRES_FUENTES ::= t1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPOS_ALIGN ::= centrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPOS_ALIGN ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPOS_ALIGN ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COLORES ::= morado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COLORES ::= anaranjado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // COLORES ::= gris 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // COLORES ::= verde 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // COLORES ::= azul 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COLORES ::= amarillo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COLORES ::= rojo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPODATOS ::= floaat 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPODATOS ::= doublee 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPODATOS ::= charr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPODATOS ::= stringg 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPODATOS ::= booleann 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPODATOS ::= intt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPR ::= para EXPR parc 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPR ::= falsee 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= truee 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= caracter 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= decimal 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= cadena 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR ::= num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR ::= menos EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPR ::= EXPR div EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPR ::= EXPR por EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPR ::= EXPR menos EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPR ::= EXPR mas EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUENTES ::= font asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ALIGN ::= align asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALIGN",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COLOR_ETIQUETA1 ::= textocolor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COLOR_ETIQUETA1 ::= color 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COLOR_ETIQUETA ::= COLOR_ETIQUETA1 asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ETIQUETAS1 ::= FUENTES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ETIQUETAS1 ::= ALIGN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ETIQUETAS1 ::= COLOR_ETIQUETA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ETIQUETAS ::= ETIQUETAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ETIQUETAS ::= ETIQUETAS ETIQUETAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONDICION ::= para CONDICION parc 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDICION ::= not CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDICION ::= EXPR mod EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDICION ::= EXPR asignacion EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= EXPR distinto EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= EXPR igual EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= EXPR menorQ EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= EXPR mayorQ EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= EXPR menor EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= EXPR mayor EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIGNACION_VAR ::= asignacion CONDICION 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=expr;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIGNACION_VAR ::= asignacion EXPR 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION_VAR",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIABLES ::= id ASIGNACION_VAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int asignleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int asignright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object asign = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIABLES ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIABLES ::= VARIABLES coma id ASIGNACION_VAR 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLES ::= VARIABLES coma id 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIAS1 ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIAS1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIAS1 ::= print para EXPR parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS ::= SENTENCIAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= SENTENCIAS SENTENCIAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TEXTO1 ::= dolar dolar SENTENCIAS dolar dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTO1 ::= caracter 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TEXTO1 ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TEXTO1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= TEXTO1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO ::= TEXTO TEXTO1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // H ::= menor h6 mayor menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // H ::= menor h6 ETIQUETAS mayor menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // H ::= menor h6 mayor TEXTO menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // H ::= menor h6 ETIQUETAS mayor TEXTO menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // H ::= menor h5 mayor menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // H ::= menor h5 ETIQUETAS mayor menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // H ::= menor h5 mayor TEXTO menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // H ::= menor h5 ETIQUETAS mayor TEXTO menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // H ::= menor h4 mayor menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // H ::= menor h4 ETIQUETAS mayor menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // H ::= menor h4 mayor TEXTO menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // H ::= menor h4 ETIQUETAS mayor TEXTO menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // H ::= menor h3 mayor menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // H ::= menor h3 ETIQUETAS mayor menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // H ::= menor h3 mayor TEXTO menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // H ::= menor h3 ETIQUETAS mayor TEXTO menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // H ::= menor h2 mayor menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // H ::= menor h2 ETIQUETAS mayor menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // H ::= menor h2 mayor TEXTO menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // H ::= menor h2 ETIQUETAS mayor TEXTO menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // H ::= menor h1 mayor menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // H ::= menor h1 ETIQUETAS mayor menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // H ::= menor h1 mayor TEXTO menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // H ::= menor h1 ETIQUETAS mayor TEXTO menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // P ::= menor p mayor menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // P ::= menor p ETIQUETAS mayor menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // P ::= menor p mayor TEXTO menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // P ::= menor p ETIQUETAS mayor TEXTO menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_BODY1 ::= P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_BODY1 ::= H 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_BODY1 ::= menor br mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_BODY ::= CUERPO_BODY1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_BODY ::= CUERPO_BODY CUERPO_BODY1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= menor body mayor menor div body mayor menor div html mayor 
            {
              Object RESULT =null;
		
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= menor body mayor CUERPO_BODY menor div body mayor menor div html mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TITLE ::= menor title mayor id menor div title mayor 
            {
              Object RESULT =null;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITLE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOHTML ::= menor head mayor TITLE menor div head mayor BODY 
            {
              Object RESULT =null;
		
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO1 ::= menor html mayor CUERPOHTML 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


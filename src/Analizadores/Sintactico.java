
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 02 18:40:54 CST 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 02 18:40:54 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\002\004\000\002\002\003\000\002\004" +
    "\006\000\002\005\013\000\002\006\012\000\002\014\016" +
    "\000\002\014\015\000\002\007\004\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\041\007\000\002\041\006\000\002\041" +
    "\010\000\002\041\007\000\002\042\004\000\002\042\003" +
    "\000\002\044\012\000\002\044\011\000\002\046\004\000" +
    "\002\046\004\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\006\000\002\046" +
    "\006\000\002\030\013\000\002\030\012\000\002\030\012" +
    "\000\002\030\011\000\002\012\013\000\002\012\012\000" +
    "\002\012\012\000\002\012\011\000\002\012\013\000\002" +
    "\012\012\000\002\012\012\000\002\012\011\000\002\012" +
    "\013\000\002\012\012\000\002\012\012\000\002\012\011" +
    "\000\002\012\013\000\002\012\012\000\002\012\012\000" +
    "\002\012\011\000\002\012\013\000\002\012\012\000\002" +
    "\012\012\000\002\012\011\000\002\012\013\000\002\012" +
    "\012\000\002\012\012\000\002\012\011\000\002\026\004" +
    "\000\002\026\003\000\002\043\003\000\002\043\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\007\000\002\033\004\000\002\033\003\000\002\034" +
    "\007\000\002\034\007\000\002\034\005\000\002\034\004" +
    "\000\002\034\005\000\002\034\005\000\002\034\006\000" +
    "\002\034\006\000\002\034\006\000\002\034\004\000\002" +
    "\051\005\000\002\051\012\000\002\051\007\000\002\036" +
    "\005\000\002\036\006\000\002\036\007\000\002\036\007" +
    "\000\002\036\007\000\002\036\003\000\002\036\004\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\004\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\023\004\000\002\023\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\016" +
    "\005\000\002\017\003\000\002\017\003\000\002\024\005" +
    "\000\002\022\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\004\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\005\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\004\075\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\077\011\001\002\000" +
    "\004\075\013\001\002\000\004\002\uffff\001\002\000\004" +
    "\005\014\001\002\000\004\077\015\001\002\000\004\075" +
    "\016\001\002\000\004\015\u0175\001\002\000\004\075\020" +
    "\001\002\000\004\033\021\001\002\000\004\005\022\001" +
    "\002\000\004\077\023\001\002\000\004\075\025\001\002" +
    "\000\004\002\ufffe\001\002\000\004\006\026\001\002\000" +
    "\004\077\027\001\002\000\004\075\035\001\002\000\004" +
    "\075\u016d\001\002\000\004\075\ufff9\001\002\000\004\075" +
    "\ufff7\001\002\000\004\075\ufff5\001\002\000\004\075\ufff6" +
    "\001\002\000\026\007\045\010\044\011\043\012\042\013" +
    "\041\014\040\016\047\023\037\024\046\033\036\001\002" +
    "\000\004\006\u0166\001\002\000\014\071\055\072\052\073" +
    "\057\074\051\077\u0152\001\002\000\014\071\055\072\052" +
    "\073\057\074\051\077\u013d\001\002\000\014\071\055\072" +
    "\052\073\057\074\051\077\u0128\001\002\000\014\071\055" +
    "\072\052\073\057\074\051\077\u0113\001\002\000\014\071" +
    "\055\072\052\073\057\074\051\077\376\001\002\000\014" +
    "\071\055\072\052\073\057\074\051\077\351\001\002\000" +
    "\014\071\055\072\052\073\057\074\051\077\324\001\002" +
    "\000\004\077\322\001\002\000\014\071\055\072\052\073" +
    "\057\074\051\077\062\001\002\000\014\071\uff9a\072\uff9a" +
    "\073\uff9a\074\uff9a\077\uff9a\001\002\000\004\103\320\001" +
    "\002\000\004\103\uff95\001\002\000\004\103\316\001\002" +
    "\000\014\071\uff99\072\uff99\073\uff99\074\uff99\077\uff99\001" +
    "\002\000\004\103\uff96\001\002\000\014\071\uff98\072\uff98" +
    "\073\uff98\074\uff98\077\uff98\001\002\000\004\103\314\001" +
    "\002\000\014\071\uff9b\072\uff9b\073\uff9b\074\uff9b\077\uff9b" +
    "\001\002\000\014\071\055\072\052\073\057\074\051\077" +
    "\310\001\002\000\006\075\065\147\066\001\002\000\006" +
    "\075\uffef\147\uffef\001\002\000\006\075\065\147\306\001" +
    "\002\000\004\021\067\001\002\000\004\075\ufff3\001\002" +
    "\000\004\077\070\001\002\000\010\026\071\027\074\075" +
    "\073\001\002\000\014\040\103\114\102\115\077\133\303" +
    "\146\076\001\002\000\010\026\266\027\270\075\267\001" +
    "\002\000\004\033\263\001\002\000\014\040\103\114\102" +
    "\115\077\132\101\146\076\001\002\000\014\040\103\114" +
    "\102\115\077\132\262\146\076\001\002\000\004\146\104" +
    "\001\002\000\020\040\uffc3\075\uffc3\114\uffc3\115\uffc3\132" +
    "\uffc3\133\uffc3\146\uffc3\001\002\000\020\040\uffc7\075\uffc7" +
    "\114\uffc7\115\uffc7\132\uffc7\133\uffc7\146\uffc7\001\002\000" +
    "\010\026\uffec\027\uffec\075\uffec\001\002\000\020\040\uffc4" +
    "\075\uffc4\114\uffc4\115\uffc4\132\uffc4\133\uffc4\146\uffc4\001" +
    "\002\000\020\040\uffc2\075\uffc2\114\uffc2\115\uffc2\132\uffc2" +
    "\133\uffc2\146\uffc2\001\002\000\024\045\122\104\111\105" +
    "\117\106\113\107\116\110\114\114\110\116\105\120\112" +
    "\001\002\000\004\035\252\001\002\000\004\114\250\001" +
    "\002\000\026\045\122\104\111\105\117\106\113\107\116" +
    "\110\114\114\110\116\105\120\112\146\244\001\002\000" +
    "\044\031\146\035\152\037\uffac\040\150\041\uffac\055\230" +
    "\056\225\057\223\060\227\061\222\103\224\111\140\112" +
    "\142\113\145\114\141\115\143\117\144\001\002\000\004" +
    "\114\uff85\001\002\000\004\114\uff80\001\002\000\004\114" +
    "\uff83\001\002\000\004\114\uff81\001\002\000\006\037\135" +
    "\041\136\001\002\000\004\114\uff82\001\002\000\004\114" +
    "\uff84\001\002\000\026\045\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\107\uffbf\110\uffbf\114\uffbf\116\uffbf\120\uffbf\146\uffbf\001" +
    "\002\000\004\037\134\001\002\000\004\124\123\001\002" +
    "\000\004\114\124\001\002\000\012\037\uffb4\041\uffb4\124" +
    "\125\125\126\001\002\000\004\114\133\001\002\000\004" +
    "\113\127\001\002\000\004\126\130\001\002\000\004\124" +
    "\131\001\002\000\004\114\132\001\002\000\006\037\uffb3" +
    "\041\uffb3\001\002\000\006\037\uffb2\041\uffb2\001\002\000" +
    "\026\045\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5" +
    "\114\uffb5\116\uffb5\120\uffb5\146\uffb5\001\002\000\026\045" +
    "\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\114\uffbb" +
    "\116\uffbb\120\uffbb\146\uffbb\001\002\000\004\114\137\001" +
    "\002\000\032\031\146\035\152\037\uffb1\040\150\041\uffb1" +
    "\103\147\111\140\112\142\113\145\114\141\115\143\117" +
    "\144\001\002\000\042\030\uff88\031\uff88\032\uff88\033\uff88" +
    "\034\uff88\036\uff88\037\uff88\041\uff88\042\uff88\043\uff88\075" +
    "\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88\001\002" +
    "\000\042\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c\036" +
    "\uff8c\037\uff8c\041\uff8c\042\uff8c\043\uff8c\075\uff8c\076\uff8c" +
    "\077\uff8c\100\uff8c\101\uff8c\102\uff8c\001\002\000\042\030" +
    "\uff87\031\uff87\032\uff87\033\uff87\034\uff87\036\uff87\037\uff87" +
    "\041\uff87\042\uff87\043\uff87\075\uff87\076\uff87\077\uff87\100" +
    "\uff87\101\uff87\102\uff87\001\002\000\042\030\uff8b\031\uff8b" +
    "\032\uff8b\033\uff8b\034\uff8b\036\uff8b\037\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b" +
    "\102\uff8b\001\002\000\042\030\uff8a\031\uff8a\032\uff8a\033" +
    "\uff8a\034\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\001" +
    "\002\000\042\030\uff8d\031\uff8d\032\uff8d\033\uff8d\034\uff8d" +
    "\036\uff8d\037\uff8d\041\uff8d\042\uff8d\043\uff8d\075\uff8d\076" +
    "\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\001\002\000\024" +
    "\031\146\035\152\040\150\111\140\112\142\113\145\114" +
    "\141\115\143\117\144\001\002\000\030\031\146\035\171" +
    "\040\150\044\165\045\122\111\140\112\142\113\145\114" +
    "\141\115\143\117\144\001\002\000\042\030\uff89\031\uff89" +
    "\032\uff89\033\uff89\034\uff89\036\uff89\037\uff89\041\uff89\042" +
    "\uff89\043\uff89\075\uff89\076\uff89\077\uff89\100\uff89\101\uff89" +
    "\102\uff89\001\002\000\016\030\155\031\156\032\154\033" +
    "\160\037\uffb0\041\uffb0\001\002\000\024\031\146\035\152" +
    "\040\150\111\140\112\142\113\145\114\141\115\143\117" +
    "\144\001\002\000\014\030\155\031\156\032\154\033\160" +
    "\036\157\001\002\000\024\031\146\035\152\040\150\111" +
    "\140\112\142\113\145\114\141\115\143\117\144\001\002" +
    "\000\024\031\146\035\152\040\150\111\140\112\142\113" +
    "\145\114\141\115\143\117\144\001\002\000\024\031\146" +
    "\035\152\040\150\111\140\112\142\113\145\114\141\115" +
    "\143\117\144\001\002\000\042\030\uff86\031\uff86\032\uff86" +
    "\033\uff86\034\uff86\036\uff86\037\uff86\041\uff86\042\uff86\043" +
    "\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86" +
    "\001\002\000\024\031\146\035\152\040\150\111\140\112" +
    "\142\113\145\114\141\115\143\117\144\001\002\000\042" +
    "\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\036\uff8f\037" +
    "\uff8f\041\uff8f\042\uff8f\043\uff8f\075\uff8f\076\uff8f\077\uff8f" +
    "\100\uff8f\101\uff8f\102\uff8f\001\002\000\042\030\uff91\031" +
    "\uff91\032\154\033\160\034\uff91\036\uff91\037\uff91\041\uff91" +
    "\042\uff91\043\uff91\075\uff91\076\uff91\077\uff91\100\uff91\101" +
    "\uff91\102\uff91\001\002\000\042\030\uff92\031\uff92\032\154" +
    "\033\160\034\uff92\036\uff92\037\uff92\041\uff92\042\uff92\043" +
    "\uff92\075\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92" +
    "\001\002\000\042\030\uff90\031\uff90\032\uff90\033\uff90\034" +
    "\uff90\036\uff90\037\uff90\041\uff90\042\uff90\043\uff90\075\uff90" +
    "\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\001\002\000" +
    "\026\031\146\035\171\040\150\044\165\111\140\112\142" +
    "\113\145\114\141\115\143\117\144\001\002\000\034\030" +
    "\155\031\156\032\154\033\160\034\204\037\uffaf\041\uffaf" +
    "\075\202\076\205\077\206\100\201\101\207\102\203\001" +
    "\002\000\006\037\uffae\041\uffae\001\002\000\012\037\uffad" +
    "\041\uffad\042\174\043\175\001\002\000\026\031\146\035" +
    "\171\040\150\044\165\111\140\112\142\113\145\114\141" +
    "\115\143\117\144\001\002\000\032\030\155\031\156\032" +
    "\154\033\160\034\204\036\157\075\202\076\205\077\206" +
    "\100\201\101\207\102\203\001\002\000\010\036\176\042" +
    "\174\043\175\001\002\000\026\031\146\035\171\040\150" +
    "\044\165\111\140\112\142\113\145\114\141\115\143\117" +
    "\144\001\002\000\026\031\146\035\171\040\150\044\165" +
    "\111\140\112\142\113\145\114\141\115\143\117\144\001" +
    "\002\000\014\036\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\001\002\000\030\030\155\031\156\032\154\033\160\034" +
    "\204\075\202\076\205\077\206\100\201\101\207\102\203" +
    "\001\002\000\014\036\uff9e\037\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\001\002\000\024\031\146\035\152\040\150\111\140" +
    "\112\142\113\145\114\141\115\143\117\144\001\002\000" +
    "\024\031\146\035\152\040\150\111\140\112\142\113\145" +
    "\114\141\115\143\117\144\001\002\000\024\031\146\035" +
    "\152\040\150\111\140\112\142\113\145\114\141\115\143" +
    "\117\144\001\002\000\024\031\146\035\152\040\150\111" +
    "\140\112\142\113\145\114\141\115\143\117\144\001\002" +
    "\000\024\031\146\035\152\040\150\111\140\112\142\113" +
    "\145\114\141\115\143\117\144\001\002\000\024\031\146" +
    "\035\152\040\150\111\140\112\142\113\145\114\141\115" +
    "\143\117\144\001\002\000\024\031\146\035\152\040\150" +
    "\111\140\112\142\113\145\114\141\115\143\117\144\001" +
    "\002\000\024\030\155\031\156\032\154\033\160\036\uffa3" +
    "\037\uffa3\041\uffa3\042\uffa3\043\uffa3\001\002\000\024\030" +
    "\155\031\156\032\154\033\160\036\uffa7\037\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\001\002\000\024\030\155\031\156\032" +
    "\154\033\160\036\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\001\002\000\024\030\155\031\156\032\154\033\160\036" +
    "\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\001\002\000\024" +
    "\030\155\031\156\032\154\033\160\036\uffa2\037\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\001\002\000\024\030\155\031\156" +
    "\032\154\033\160\036\uffa6\037\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\001\002\000\024\030\155\031\156\032\154\033\160" +
    "\036\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\001\002\000" +
    "\014\036\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\001\002" +
    "\000\014\036\uffa0\037\uffa0\041\uffa0\042\uffa0\043\uffa0\001" +
    "\002\000\042\030\uff8e\031\uff8e\032\154\033\160\034\uff8e" +
    "\036\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e\075\uff8e\076" +
    "\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\001\002\000\024" +
    "\031\146\035\152\040\150\111\140\112\142\113\145\114" +
    "\141\115\143\117\144\001\002\000\024\031\146\035\152" +
    "\040\150\111\140\112\142\113\145\114\141\115\143\117" +
    "\144\001\002\000\030\031\146\035\171\040\150\044\165" +
    "\045\122\111\140\112\142\113\145\114\141\115\143\117" +
    "\144\001\002\000\004\037\234\001\002\000\016\030\155" +
    "\031\156\032\154\033\160\037\uffab\041\uffab\001\002\000" +
    "\024\031\146\035\152\040\150\111\140\112\142\113\145" +
    "\114\141\115\143\117\144\001\002\000\004\037\231\001" +
    "\002\000\026\045\uffba\104\uffba\105\uffba\106\uffba\107\uffba" +
    "\110\uffba\114\uffba\116\uffba\120\uffba\146\uffba\001\002\000" +
    "\014\030\155\031\156\032\154\033\160\037\233\001\002" +
    "\000\026\045\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110" +
    "\uffb7\114\uffb7\116\uffb7\120\uffb7\146\uffb7\001\002\000\026" +
    "\045\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\114" +
    "\uffb9\116\uffb9\120\uffb9\146\uffb9\001\002\000\034\030\155" +
    "\031\156\032\154\033\160\034\204\037\uffaa\041\uffaa\075" +
    "\202\076\205\077\206\100\201\101\207\102\203\001\002" +
    "\000\006\037\uffa8\041\uffa8\001\002\000\012\037\uffa9\041" +
    "\uffa9\042\174\043\175\001\002\000\014\030\155\031\156" +
    "\032\154\033\160\037\241\001\002\000\026\045\uffb8\104" +
    "\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8\114\uffb8\116\uffb8" +
    "\120\uffb8\146\uffb8\001\002\000\014\030\155\031\156\032" +
    "\154\033\160\037\243\001\002\000\026\045\uffb6\104\uffb6" +
    "\105\uffb6\106\uffb6\107\uffb6\110\uffb6\114\uffb6\116\uffb6\120" +
    "\uffb6\146\uffb6\001\002\000\004\146\246\001\002\000\026" +
    "\045\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\114" +
    "\uffc0\116\uffc0\120\uffc0\146\uffc0\001\002\000\020\040\uffc1" +
    "\075\uffc1\114\uffc1\115\uffc1\132\uffc1\133\uffc1\146\uffc1\001" +
    "\002\000\006\037\251\041\136\001\002\000\032\031\146" +
    "\035\152\037\uffac\040\150\041\uffac\103\224\111\140\112" +
    "\142\113\145\114\141\115\143\117\144\001\002\000\026" +
    "\045\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc\114" +
    "\uffbc\116\uffbc\120\uffbc\146\uffbc\001\002\000\026\031\146" +
    "\035\171\040\150\044\165\111\140\112\142\113\145\114" +
    "\141\115\143\117\144\001\002\000\032\030\155\031\156" +
    "\032\154\033\160\034\204\036\257\075\202\076\205\077" +
    "\206\100\201\101\207\102\203\001\002\000\010\036\255" +
    "\042\174\043\175\001\002\000\004\037\256\001\002\000" +
    "\026\045\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd" +
    "\114\uffbd\116\uffbd\120\uffbd\146\uffbd\001\002\000\004\037" +
    "\260\001\002\000\026\045\uffbe\104\uffbe\105\uffbe\106\uffbe" +
    "\107\uffbe\110\uffbe\114\uffbe\116\uffbe\120\uffbe\146\uffbe\001" +
    "\002\000\020\040\uffc8\075\uffc8\114\uffc8\115\uffc8\132\uffc8" +
    "\133\uffc8\146\uffc8\001\002\000\010\026\uffea\027\uffea\075" +
    "\uffea\001\002\000\004\021\264\001\002\000\004\077\265" +
    "\001\002\000\006\075\uffed\147\uffed\001\002\000\014\040" +
    "\103\114\102\115\077\133\300\146\076\001\002\000\004" +
    "\033\274\001\002\000\014\040\103\114\102\115\077\132" +
    "\272\146\076\001\002\000\014\040\103\114\102\115\077" +
    "\132\273\146\076\001\002\000\010\026\uffe8\027\uffe8\075" +
    "\uffe8\001\002\000\010\026\uffe6\027\uffe6\075\uffe6\001\002" +
    "\000\004\021\275\001\002\000\004\077\276\001\002\000" +
    "\006\075\uffee\147\uffee\001\002\000\014\040\103\114\102" +
    "\115\077\133\301\146\076\001\002\000\010\026\uffe7\027" +
    "\uffe7\075\uffe7\001\002\000\010\026\uffe5\027\uffe5\075\uffe5" +
    "\001\002\000\014\040\103\114\102\115\077\133\304\146" +
    "\076\001\002\000\010\026\uffeb\027\uffeb\075\uffeb\001\002" +
    "\000\010\026\uffe9\027\uffe9\075\uffe9\001\002\000\006\075" +
    "\ufff0\147\ufff0\001\002\000\004\075\ufff1\001\002\000\014" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\077\uff9c\001\002\000" +
    "\006\075\065\147\312\001\002\000\006\075\065\147\313" +
    "\001\002\000\004\075\ufff4\001\002\000\004\075\ufff2\001" +
    "\002\000\004\115\315\001\002\000\014\071\uff94\072\uff94" +
    "\073\uff94\074\uff94\077\uff94\001\002\000\004\115\317\001" +
    "\002\000\014\071\uff97\072\uff97\073\uff97\074\uff97\077\uff97" +
    "\001\002\000\004\115\321\001\002\000\014\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\077\uff93\001\002\000\004\075\ufff8" +
    "\001\002\000\014\071\055\072\052\073\057\074\051\077" +
    "\336\001\002\000\014\040\103\075\326\114\102\115\077" +
    "\146\076\001\002\000\014\040\103\075\332\114\102\115" +
    "\077\146\076\001\002\000\004\033\327\001\002\000\004" +
    "\007\330\001\002\000\004\077\331\001\002\000\004\075" +
    "\uffdd\001\002\000\004\033\333\001\002\000\004\007\334" +
    "\001\002\000\004\077\335\001\002\000\004\075\uffdf\001" +
    "\002\000\014\040\103\075\340\114\102\115\077\146\076" +
    "\001\002\000\014\040\103\075\344\114\102\115\077\146" +
    "\076\001\002\000\004\033\341\001\002\000\004\007\342" +
    "\001\002\000\004\077\343\001\002\000\004\075\uffde\001" +
    "\002\000\004\033\345\001\002\000\004\007\346\001\002" +
    "\000\004\077\347\001\002\000\004\075\uffe0\001\002\000" +
    "\014\071\055\072\052\073\057\074\051\077\363\001\002" +
    "\000\014\040\103\075\353\114\102\115\077\146\076\001" +
    "\002\000\014\040\103\075\357\114\102\115\077\146\076" +
    "\001\002\000\004\033\354\001\002\000\004\010\355\001" +
    "\002\000\004\077\356\001\002\000\004\075\uffd9\001\002" +
    "\000\004\033\360\001\002\000\004\010\361\001\002\000" +
    "\004\077\362\001\002\000\004\075\uffdb\001\002\000\014" +
    "\040\103\075\365\114\102\115\077\146\076\001\002\000" +
    "\014\040\103\075\371\114\102\115\077\146\076\001\002" +
    "\000\004\033\366\001\002\000\004\010\367\001\002\000" +
    "\004\077\370\001\002\000\004\075\uffda\001\002\000\004" +
    "\033\372\001\002\000\004\010\373\001\002\000\004\077" +
    "\374\001\002\000\004\075\uffdc\001\002\000\014\071\055" +
    "\072\052\073\057\074\051\077\u0108\001\002\000\014\040" +
    "\103\075\u0100\114\102\115\077\146\076\001\002\000\014" +
    "\040\103\075\u0104\114\102\115\077\146\076\001\002\000" +
    "\004\033\u0101\001\002\000\004\011\u0102\001\002\000\004" +
    "\077\u0103\001\002\000\004\075\uffd5\001\002\000\004\033" +
    "\u0105\001\002\000\004\011\u0106\001\002\000\004\077\u0107" +
    "\001\002\000\004\075\uffd7\001\002\000\014\040\103\075" +
    "\u010a\114\102\115\077\146\076\001\002\000\014\040\103" +
    "\075\u010e\114\102\115\077\146\076\001\002\000\004\033" +
    "\u010b\001\002\000\004\011\u010c\001\002\000\004\077\u010d" +
    "\001\002\000\004\075\uffd6\001\002\000\004\033\u010f\001" +
    "\002\000\004\011\u0110\001\002\000\004\077\u0111\001\002" +
    "\000\004\075\uffd8\001\002\000\014\071\055\072\052\073" +
    "\057\074\051\077\u011d\001\002\000\014\040\103\075\u0115" +
    "\114\102\115\077\146\076\001\002\000\014\040\103\075" +
    "\u0119\114\102\115\077\146\076\001\002\000\004\033\u0116" +
    "\001\002\000\004\012\u0117\001\002\000\004\077\u0118\001" +
    "\002\000\004\075\uffd1\001\002\000\004\033\u011a\001\002" +
    "\000\004\012\u011b\001\002\000\004\077\u011c\001\002\000" +
    "\004\075\uffd3\001\002\000\014\040\103\075\u011f\114\102" +
    "\115\077\146\076\001\002\000\014\040\103\075\u0123\114" +
    "\102\115\077\146\076\001\002\000\004\033\u0120\001\002" +
    "\000\004\012\u0121\001\002\000\004\077\u0122\001\002\000" +
    "\004\075\uffd2\001\002\000\004\033\u0124\001\002\000\004" +
    "\012\u0125\001\002\000\004\077\u0126\001\002\000\004\075" +
    "\uffd4\001\002\000\014\071\055\072\052\073\057\074\051" +
    "\077\u0132\001\002\000\014\040\103\075\u012a\114\102\115" +
    "\077\146\076\001\002\000\014\040\103\075\u012e\114\102" +
    "\115\077\146\076\001\002\000\004\033\u012b\001\002\000" +
    "\004\013\u012c\001\002\000\004\077\u012d\001\002\000\004" +
    "\075\uffcd\001\002\000\004\033\u012f\001\002\000\004\013" +
    "\u0130\001\002\000\004\077\u0131\001\002\000\004\075\uffcf" +
    "\001\002\000\014\040\103\075\u0134\114\102\115\077\146" +
    "\076\001\002\000\014\040\103\075\u0138\114\102\115\077" +
    "\146\076\001\002\000\004\033\u0135\001\002\000\004\013" +
    "\u0136\001\002\000\004\077\u0137\001\002\000\004\075\uffce" +
    "\001\002\000\004\033\u0139\001\002\000\004\013\u013a\001" +
    "\002\000\004\077\u013b\001\002\000\004\075\uffd0\001\002" +
    "\000\014\071\055\072\052\073\057\074\051\077\u0147\001" +
    "\002\000\014\040\103\075\u013f\114\102\115\077\146\076" +
    "\001\002\000\014\040\103\075\u0143\114\102\115\077\146" +
    "\076\001\002\000\004\033\u0140\001\002\000\004\014\u0141" +
    "\001\002\000\004\077\u0142\001\002\000\004\075\uffc9\001" +
    "\002\000\004\033\u0144\001\002\000\004\014\u0145\001\002" +
    "\000\004\077\u0146\001\002\000\004\075\uffcb\001\002\000" +
    "\014\040\103\075\u0149\114\102\115\077\146\076\001\002" +
    "\000\014\040\103\075\u014d\114\102\115\077\146\076\001" +
    "\002\000\004\033\u014a\001\002\000\004\014\u014b\001\002" +
    "\000\004\077\u014c\001\002\000\004\075\uffca\001\002\000" +
    "\004\033\u014e\001\002\000\004\014\u014f\001\002\000\004" +
    "\077\u0150\001\002\000\004\075\uffcc\001\002\000\014\071" +
    "\055\072\052\073\057\074\051\077\u015c\001\002\000\014" +
    "\040\103\075\u0154\114\102\115\077\146\076\001\002\000" +
    "\014\040\103\075\u0158\114\102\115\077\146\076\001\002" +
    "\000\004\033\u0155\001\002\000\004\023\u0156\001\002\000" +
    "\004\077\u0157\001\002\000\004\075\uffe1\001\002\000\004" +
    "\033\u0159\001\002\000\004\023\u015a\001\002\000\004\077" +
    "\u015b\001\002\000\004\075\uffe3\001\002\000\014\040\103" +
    "\075\u015e\114\102\115\077\146\076\001\002\000\014\040" +
    "\103\075\u0162\114\102\115\077\146\076\001\002\000\004" +
    "\033\u015f\001\002\000\004\023\u0160\001\002\000\004\077" +
    "\u0161\001\002\000\004\075\uffe2\001\002\000\004\033\u0163" +
    "\001\002\000\004\023\u0164\001\002\000\004\077\u0165\001" +
    "\002\000\004\075\uffe4\001\002\000\004\077\u0167\001\002" +
    "\000\004\075\u0168\001\002\000\004\033\u0169\001\002\000" +
    "\004\004\u016a\001\002\000\004\077\u016b\001\002\000\004" +
    "\002\ufffb\001\002\000\004\075\ufffa\001\002\000\026\007" +
    "\045\010\044\011\043\012\042\013\041\014\040\016\047" +
    "\023\037\024\046\033\u016e\001\002\000\004\006\u016f\001" +
    "\002\000\004\077\u0170\001\002\000\004\075\u0171\001\002" +
    "\000\004\033\u0172\001\002\000\004\004\u0173\001\002\000" +
    "\004\077\u0174\001\002\000\004\002\ufffc\001\002\000\004" +
    "\077\u0176\001\002\000\004\114\u0177\001\002\000\004\075" +
    "\u0178\001\002\000\004\033\u0179\001\002\000\004\015\u017a" +
    "\001\002\000\004\077\u017b\001\002\000\004\075\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0179\000\006\002\005\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\027\010\030\012\031\030\033\041\032" +
    "\001\001\000\012\010\u016b\012\031\030\033\041\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\047\017\052\022\055\023\u0150\024\053\025\057" +
    "\001\001\000\016\016\047\017\052\022\055\023\u013b\024" +
    "\053\025\057\001\001\000\016\016\047\017\052\022\055" +
    "\023\u0126\024\053\025\057\001\001\000\016\016\047\017" +
    "\052\022\055\023\u0111\024\053\025\057\001\001\000\016" +
    "\016\047\017\052\022\055\023\374\024\053\025\057\001" +
    "\001\000\016\016\047\017\052\022\055\023\347\024\053" +
    "\025\057\001\001\000\016\016\047\017\052\022\055\023" +
    "\322\024\053\025\057\001\001\000\002\001\001\000\016" +
    "\016\047\017\052\022\055\023\060\024\053\025\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\047\017\052\022\055\024\053\025\306\001\001\000" +
    "\006\042\063\044\062\001\001\000\002\001\001\000\004" +
    "\044\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\071\001\001\000\006\026\301" +
    "\027\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\074\027\077\001\001\000\004\027\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\106\034\117\035\105\036\114\051\120\001\001\000" +
    "\002\001\001\000\004\036\246\001\001\000\012\034\244" +
    "\035\105\036\114\051\120\001\001\000\004\031\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\220\001\001\000\010\031\165\040" +
    "\167\051\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\152\001\001\000\002\001\001\000\004\031" +
    "\163\001\001\000\004\031\162\001\001\000\004\031\161" +
    "\001\001\000\002\001\001\000\004\031\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\031\176\040\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\171" +
    "\040\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\176\040\216\001\001\000\006\031\176\040\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\215\001\001\000\004\031\214\001\001" +
    "\000\004\031\213\001\001\000\004\031\212\001\001\000" +
    "\004\031\211\001\001\000\004\031\210\001\001\000\004" +
    "\031\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\241\001\001\000\004" +
    "\031\237\001\001\000\010\031\234\040\236\051\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\231" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\225\001\001\000\002\001\001\000\006" +
    "\031\252\040\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\276\027\077\001\001\000\002\001\001\000\006\026" +
    "\270\027\077\001\001\000\004\027\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\310\044\062\001" +
    "\001\000\004\044\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\047\017\052\022\055\024" +
    "\053\025\306\001\001\000\006\026\324\027\077\001\001" +
    "\000\004\027\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\336\027\077\001\001\000\004\027\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\047\017\052\022" +
    "\055\024\053\025\306\001\001\000\006\026\351\027\077" +
    "\001\001\000\004\027\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\363\027\077\001\001\000\004\027\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\047\017" +
    "\052\022\055\024\053\025\306\001\001\000\006\026\376" +
    "\027\077\001\001\000\004\027\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\u0108\027\077\001\001\000\004" +
    "\027\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\016" +
    "\047\017\052\022\055\024\053\025\306\001\001\000\006" +
    "\026\u0113\027\077\001\001\000\004\027\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\u011d\027\077\001\001" +
    "\000\004\027\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\047\017\052\022\055\024\053\025\306\001\001" +
    "\000\006\026\u0128\027\077\001\001\000\004\027\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\u0132\027\077" +
    "\001\001\000\004\027\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\047\017\052\022\055\024\053\025\306" +
    "\001\001\000\006\026\u013d\027\077\001\001\000\004\027" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\u0147" +
    "\027\077\001\001\000\004\027\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\047\017\052\022\055\024\053" +
    "\025\306\001\001\000\006\026\u0152\027\077\001\001\000" +
    "\004\027\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u015c\027\077\001\001\000\004\027\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }
    
    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NOMBRES_FUENTES ::= t10 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NOMBRES_FUENTES ::= t9 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NOMBRES_FUENTES ::= t8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NOMBRES_FUENTES ::= t7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NOMBRES_FUENTES ::= t6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NOMBRES_FUENTES ::= t5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NOMBRES_FUENTES ::= t4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NOMBRES_FUENTES ::= t3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NOMBRES_FUENTES ::= t2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NOMBRES_FUENTES ::= t1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TIPOS_ALIGN ::= centrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TIPOS_ALIGN ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TIPOS_ALIGN ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // COLORES ::= morado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // COLORES ::= anaranjado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // COLORES ::= gris 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // COLORES ::= verde 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // COLORES ::= azul 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COLORES ::= amarillo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COLORES ::= rojo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TIPODATOS ::= floaat 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TIPODATOS ::= doublee 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // TIPODATOS ::= charr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TIPODATOS ::= stringg 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TIPODATOS ::= booleann 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // TIPODATOS ::= intt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPODATOS",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPR ::= para EXPR parc 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT =a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPR ::= falsee 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPR ::= truee 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPR ::= caracter 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPR ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPR ::= cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPR ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPR ::= num 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPR ::= menos EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
          RESULT = "-"+a.toString(); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPR ::= EXPR div EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           String a1 = (String) a;
           char rs1 = a1.charAt(0);

           String a2 = (String) b;
           char rs2 = a2.charAt(0);

           if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                double valor1 = Double.parseDouble((String) a);
                double valor2 = Double.parseDouble((String) b);
                if (valor1 % 1 == 0 && valor2 % 1 == 0) {
                      int r = (int) (valor1 / valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }else if((valor1 % 1 != 0 && valor2 % 1 == 0)|| (valor1 % 1 == 0 && valor2 % 1 != 0)||((valor1 % 1 != 0 && valor2 % 1 != 0))){
                      Double r = (valor1 / valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }
           }else if ((!Character.isDigit(rs1) && Character.isDigit(rs2))|| Character.isDigit(rs1) && !Character.isDigit(rs2)){
                    String valor1=(String)a;
                    String valor2=(String)b;
                    String r= valor1+"/"+valor2;
                    System.out.println("No es posible restar con Strings " + a + m + b + "= " + r);
                    RESULT=String.valueOf(r);
           }else {
                  System.out.println("horror");
           }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPR ::= EXPR por EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           String a1 = (String) a;
           char rs1 = a1.charAt(0);

           String a2 = (String) b;
           char rs2 = a2.charAt(0);

           if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                double valor1 = Double.parseDouble((String) a);
                double valor2 = Double.parseDouble((String) b);
                if (valor1 % 1 == 0 && valor2 % 1 == 0) {
                      int r = (int) (valor1 * valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }else if((valor1 % 1 != 0 && valor2 % 1 == 0)|| (valor1 % 1 == 0 && valor2 % 1 != 0)||((valor1 % 1 != 0 && valor2 % 1 != 0))){
                      Double r = (valor1 * valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }
           }else if ((!Character.isDigit(rs1) && Character.isDigit(rs2))|| Character.isDigit(rs1) && !Character.isDigit(rs2)){
                    String valor1=(String)a;
                    String valor2=(String)b;
                    String r= valor1+"*"+valor2;
                    System.out.println("No es posible restar con Strings " + a + m + b + "= " + r);
                    RESULT=String.valueOf(r);
           }else {
                  System.out.println("horror");
           }
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPR ::= EXPR menos EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           String a1 = (String) a;
           char rs1 = a1.charAt(0);

           String a2 = (String) b;
           char rs2 = a2.charAt(0);

           if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                double valor1 = Double.parseDouble((String) a);
                double valor2 = Double.parseDouble((String) b);
                if (valor1 % 1 == 0 && valor2 % 1 == 0) {
                      int r = (int) (valor1 - valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }else if((valor1 % 1 != 0 && valor2 % 1 == 0)|| (valor1 % 1 == 0 && valor2 % 1 != 0)||((valor1 % 1 != 0 && valor2 % 1 != 0))){
                      Double r = (valor1 - valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }
           }else if ((!Character.isDigit(rs1) && Character.isDigit(rs2))|| Character.isDigit(rs1) && !Character.isDigit(rs2)){
                    String valor1=(String)a;
                    String valor2=(String)b;
                    String r= valor1+"-"+valor2;
                    System.out.println("No es posible restar con Strings " + a + m + b + "= " + r);
                    RESULT=String.valueOf(r);
           }else {
                                    System.out.println("horror");
           }


        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPR ::= EXPR mas EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           String a1 = (String) a;
           char rs1 = a1.charAt(0);

           String a2 = (String) b;
           char rs2 = a2.charAt(0);

           if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                double valor1 = Double.parseDouble((String) a);
                double valor2 = Double.parseDouble((String) b);
                if (valor1 % 1 == 0 && valor2 % 1 == 0) {
                      int r = (int) (valor1 + valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }else if((valor1 % 1 != 0 && valor2 % 1 == 0)|| (valor1 % 1 == 0 && valor2 % 1 != 0)){
                      Double r = (valor1 + valor2);
                      System.out.println("El resultado de " + a + m + b + "=" + r);
                      RESULT = String.valueOf(r);
                }
           }else if ((!Character.isDigit(rs1) && Character.isDigit(rs2))|| (Character.isDigit(rs1) && !Character.isDigit(rs2))|| (!Character.isDigit(rs1) && !Character.isDigit(rs2))){
                    String valor1=(String)a;
                    String valor2=(String)b;
                    String r= valor1+valor2;
                    r = r.replaceAll("\"", "");
                    System.out.println("El resultado de " + a + m + b + "= " + r);
                    RESULT=String.valueOf(r);
           }else {
                                    System.out.println("horror");
           }

        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // FUENTES ::= font asignacion cadena 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ALIGN ::= align asignacion cadena 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALIGN",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COLOR_ETIQUETA1 ::= textocolor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COLOR_ETIQUETA1 ::= color 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COLOR_ETIQUETA ::= COLOR_ETIQUETA1 asignacion cadena 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString()+a2.toString()+a3.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ETIQUETAS1 ::= FUENTES 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ETIQUETAS1 ::= ALIGN 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ETIQUETAS1 ::= COLOR_ETIQUETA 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ETIQUETAS ::= ETIQUETAS1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ETIQUETAS ::= ETIQUETAS ETIQUETAS1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONDICION ::= para CONDICION parc 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONDICION ::= CONDICION or CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONDICION ::= CONDICION and CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONDICION ::= not CONDICION 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONDICION ::= EXPR mod EXPR 
            {
              Object RESULT =null;
		
                  RESULT="";
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONDICION ::= EXPR distinto EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String a1 = (String) a;
                    char rs1 = a1.charAt(0);
            
                    String a2 = (String) b;
                    char rs2 = a2.charAt(0);

                    if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                        double valor1 = Double.parseDouble((String) a);
                        double valor2 = Double.parseDouble((String) b);
                        if (valor1 != valor2) {
                            String r = "true";
                            System.out.println("El resultado de " + a + m + b + "!=" + r);
                            RESULT = String.valueOf(r);
                        }else {
                            String r = "false";
                            System.out.println("El resultado de " + a + m + b + "!=" + r);
                            RESULT = String.valueOf(r);
                        }
                    }else {
                        RESULT=a1+m+a2;
                        System.out.println("Error Semantico");
                     }
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONDICION ::= EXPR igual EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String a1 = (String) a;
                    char rs1 = a1.charAt(0);
            
                    String a2 = (String) b;
                    char rs2 = a2.charAt(0);

                    if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                        double valor1 = Double.parseDouble((String) a);
                        double valor2 = Double.parseDouble((String) b);
                        if (valor1 == valor2) {
                            String r = "true";
                            System.out.println("El resultado de " + a + m + b + "==" + r);
                            RESULT = String.valueOf(r);
                        }else {
                            String r = "false";
                            System.out.println("El resultado de " + a + m + b + "==" + r);
                            RESULT = String.valueOf(r);
                        }
                    }else {
                        RESULT=a1+m+a2;
                        System.out.println("Error Semantico");
                     }
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONDICION ::= EXPR menorQ EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String a1 = (String) a;
                    char rs1 = a1.charAt(0);
            
                    String a2 = (String) b;
                    char rs2 = a2.charAt(0);

                    if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                        double valor1 = Double.parseDouble((String) a);
                        double valor2 = Double.parseDouble((String) b);
                        if (valor1 <= valor2) {
                            String r = "true";
                            System.out.println("El resultado de " + a + m + b + "<=" + r);
                            RESULT = String.valueOf(r);
                        }else {
                            String r = "false";
                            System.out.println("El resultado de " + a + m + b + "<=" + r);
                            RESULT = String.valueOf(r);
                        }
                    }else {
                        RESULT=a1+m+a2;
                        System.out.println("Error Semantico");
                     }
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= EXPR mayorQ EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String a1 = (String) a;
                    char rs1 = a1.charAt(0);
            
                    String a2 = (String) b;
                    char rs2 = a2.charAt(0);

                    if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                        double valor1 = Double.parseDouble((String) a);
                        double valor2 = Double.parseDouble((String) b);
                        if (valor1 >= valor2) {
                            String r = "true";
                            System.out.println("El resultado de " + a + m + b + ">=" + r);
                            RESULT = String.valueOf(r);
                        }else {
                            String r = "false";
                            System.out.println("El resultado de " + a + m + b + ">=" + r);
                            RESULT = String.valueOf(r);
                        }
                    }else {
                        RESULT=a1+m+a2;
                        System.out.println("Error Semantico");
                     }
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= EXPR menor EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String a1 = (String) a;
                    char rs1 = a1.charAt(0);
            
                    String a2 = (String) b;
                    char rs2 = a2.charAt(0);

                    if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                        double valor1 = Double.parseDouble((String) a);
                        double valor2 = Double.parseDouble((String) b);
                        if (valor1 < valor2) {
                            String r = "true";
                            System.out.println("El resultado de " + a + m + b + "<" + r);
                            RESULT = String.valueOf(r);
                        }else {
                            String r = "false";
                            System.out.println("El resultado de " + a + m + b + "<" + r);
                            RESULT = String.valueOf(r);
                        }
                    }else {
                        RESULT=a1+m+a2;
                        System.out.println("Error Semantico");
                     }
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= EXPR mayor EXPR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    String a1 = (String) a;
                    char rs1 = a1.charAt(0);
            
                    String a2 = (String) b;
                    char rs2 = a2.charAt(0);

                    if (Character.isDigit(rs1) && Character.isDigit(rs2)) {
                        double valor1 = Double.parseDouble((String) a);
                        double valor2 = Double.parseDouble((String) b);
                        if (valor1 > valor2) {
                            String r = "true";
                            System.out.println("El resultado de " + a + m + b + "=" + r);
                            RESULT = String.valueOf(r);
                        }else {
                            String r = "false";
                            System.out.println("El resultado de " + a + m + b + "=" + r);
                            RESULT = String.valueOf(r);
                        }
                    }else {
                        RESULT=a1+m+a2;
                        System.out.println("Error Semantico");
                     }
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONDICION",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLES ::= id asignacion RESULT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLES ::= id asignacion CONDICION 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLES ::= id asignacion EXPR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLES ::= id EXPR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLES ::= id 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLES ::= VARIABLES coma id asignacion CONDICION 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLES ::= VARIABLES coma id asignacion RESULT 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLES ::= VARIABLES coma id asignacion EXPR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLES ::= VARIABLES coma id EXPR 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLES ::= VARIABLES coma id 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // RESULT ::= result pto id pto id 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int pto1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pto1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object pto1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pto2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pto2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object pto2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=r.toString()+pto1.toString()+id1.toString()+pto2.toString()+id2.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESULT",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RESULT ::= result pto id cora num corc pto id 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
                RESULT=r.toString()+p.toString()+id.toString()+c.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESULT",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RESULT ::= result pto id 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=r.toString()+p.toString()+id.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("RESULT",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIAS1 ::= RESULT ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIAS1 ::= id asignpor EXPR ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIAS1 ::= id asignmenos EXPR ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIAS1 ::= id asignmas EXPR ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIAS1 ::= id menosmenos ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIAS1 ::= id masmas ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIAS1 ::= VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIAS1 ::= TIPODATOS VARIABLES ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIAS1 ::= print para CONDICION parc ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIAS1 ::= print para EXPR parc ptoYcoma 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIAS ::= SENTENCIAS1 
            {
              Object RESULT =null;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIAS ::= SENTENCIAS SENTENCIAS1 
            {
              Object RESULT =null;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TEXTO1 ::= dolar dolar SENTENCIAS dolar dolar 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a3.toString();
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TEXTO1 ::= caracter 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TEXTO1 ::= cadena 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TEXTO1 ::= id 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TRBODY ::= SENTENCIAS 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TRBODY",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TRBODY ::= TEXTO 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TRBODY",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TEXTO ::= TEXTO1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TEXTO ::= TEXTO TEXTO1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString();
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // H ::= menor h6 mayor menor div h6 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // H ::= menor h6 ETIQUETAS mayor menor div h6 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // H ::= menor h6 mayor TEXTO menor div h6 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // H ::= menor h6 ETIQUETAS mayor TEXTO menor div h6 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // H ::= menor h5 mayor menor div h5 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // H ::= menor h5 ETIQUETAS mayor menor div h5 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // H ::= menor h5 mayor TEXTO menor div h5 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // H ::= menor h5 ETIQUETAS mayor TEXTO menor div h5 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // H ::= menor h4 mayor menor div h4 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // H ::= menor h4 ETIQUETAS mayor menor div h4 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // H ::= menor h4 mayor TEXTO menor div h4 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // H ::= menor h4 ETIQUETAS mayor TEXTO menor div h4 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // H ::= menor h3 mayor menor div h3 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // H ::= menor h3 ETIQUETAS mayor menor div h3 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // H ::= menor h3 mayor TEXTO menor div h3 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // H ::= menor h3 ETIQUETAS mayor TEXTO menor div h3 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // H ::= menor h2 mayor menor div h2 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // H ::= menor h2 ETIQUETAS mayor menor div h2 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // H ::= menor h2 mayor TEXTO menor div h2 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // H ::= menor h2 ETIQUETAS mayor TEXTO menor div h2 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // H ::= menor h1 mayor menor div h1 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // H ::= menor h1 ETIQUETAS mayor menor div h1 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // H ::= menor h1 mayor TEXTO menor div h1 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // H ::= menor h1 ETIQUETAS mayor TEXTO menor div h1 mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // P ::= menor p mayor menor div p mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // P ::= menor p ETIQUETAS mayor menor div p mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // P ::= menor p mayor TEXTO menor div p mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // P ::= menor p ETIQUETAS mayor TEXTO menor div p mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TABLE4 ::= TABLE4 tda TEXTO tdc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TABLE4 ::= TABLE4 tha TEXTO thc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TABLE4 ::= TABLE4 tda tdc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TABLE4 ::= TABLE4 tha thc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TABLE4 ::= tda TEXTO tdc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TABLE4 ::= tha TEXTO thc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TABLE4 ::= tda tdc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TABLE4 ::= tha thc 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE4",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TABLE2 ::= menor tr mayor menor div tr mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TABLE2 ::= menor tr mayor TABLE4 menor div tr mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE2",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TABLE1 ::= TABLE2 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString();           
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TABLE1 ::= TABLE1 TABLE2 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString();           
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE1",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TABLE ::= menor table mayor TABLE1 ctable 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TABLE ::= menor table ETIQUETAS mayor TABLE1 ctable 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TABLE ::= menor table mayor ctable 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TABLE ::= menor table ETIQUETAS mayor ctable 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TABLE",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_BODY1 ::= TABLE 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString();           
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_BODY1 ::= P 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString();           
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_BODY1 ::= H 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString();           
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_BODY1 ::= menor br mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString()+a2.toString()+a3.toString();           
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_BODY ::= CUERPO_BODY1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString();           
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_BODY ::= CUERPO_BODY CUERPO_BODY1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT=a1.toString();
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= menor body mayor menor div body mayor menor div html mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a10left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a10right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a10 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a11left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a11right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a11 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a12left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a12right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a12 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString()+a10.toString()+a11.toString()+a12.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= menor body mayor CUERPO_BODY menor div body mayor menor div html mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a10left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a10right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a10 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a11left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a11right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a11 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a12left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a12right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a12 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString()+a10.toString()+a11.toString()+a12.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TITLE ::= menor title mayor id menor div title mayor 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString();
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITLE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOHTML ::= menor head mayor TITLE menor div head mayor BODY 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int a5left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a5right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a5 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int a6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a7left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a7right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a7 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString()+a5.toString()+a6.toString()+a7.toString()+a8.toString()+a9.toString();
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO1 ::= menor html mayor CUERPOHTML 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
             RESULT=a1.toString()+a2.toString()+a3.toString()+a4.toString(); 
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


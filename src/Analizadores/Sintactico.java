
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 01 05:36:58 CST 2018
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 01 05:36:58 CST 2018
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\002\003\000\002\004" +
    "\006\000\002\005\013\000\002\006\012\000\002\014\016" +
    "\000\002\014\015\000\002\007\004\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\030\013\000\002\030\012\000\002\030\012\000\002\030" +
    "\011\000\002\012\013\000\002\012\012\000\002\012\012" +
    "\000\002\012\011\000\002\012\013\000\002\012\012\000" +
    "\002\012\012\000\002\012\011\000\002\012\013\000\002" +
    "\012\012\000\002\012\012\000\002\012\011\000\002\012" +
    "\013\000\002\012\012\000\002\012\012\000\002\012\011" +
    "\000\002\012\013\000\002\012\012\000\002\012\012\000" +
    "\002\012\011\000\002\012\013\000\002\012\012\000\002" +
    "\012\012\000\002\012\011\000\002\026\004\000\002\026" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\007" +
    "\000\002\033\004\000\002\033\003\000\002\034\007\000" +
    "\002\023\004\000\002\023\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\016\005\000\002\017" +
    "\003\000\002\017\003\000\002\024\005\000\002\022\005" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\004\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\004\061\005\001\002\000\004\002\000\001" +
    "\002\000\004\004\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\063\011\001\002\000" +
    "\004\061\013\001\002\000\004\002\uffff\001\002\000\004" +
    "\005\014\001\002\000\004\063\015\001\002\000\004\061" +
    "\016\001\002\000\004\015\374\001\002\000\004\061\020" +
    "\001\002\000\004\031\021\001\002\000\004\005\022\001" +
    "\002\000\004\063\023\001\002\000\004\061\025\001\002" +
    "\000\004\002\ufffe\001\002\000\004\006\026\001\002\000" +
    "\004\063\027\001\002\000\004\061\034\001\002\000\004" +
    "\061\364\001\002\000\004\061\ufff9\001\002\000\004\061" +
    "\ufff7\001\002\000\004\061\ufff6\001\002\000\024\007\044" +
    "\010\043\011\042\012\041\013\040\014\037\023\036\024" +
    "\045\031\035\001\002\000\004\006\355\001\002\000\014" +
    "\055\054\056\050\057\056\060\051\063\331\001\002\000" +
    "\014\055\054\056\050\057\056\060\051\063\304\001\002" +
    "\000\014\055\054\056\050\057\056\060\051\063\257\001" +
    "\002\000\014\055\054\056\050\057\056\060\051\063\232" +
    "\001\002\000\014\055\054\056\050\057\056\060\051\063" +
    "\205\001\002\000\014\055\054\056\050\057\056\060\051" +
    "\063\160\001\002\000\014\055\054\056\050\057\056\060" +
    "\051\063\061\001\002\000\004\063\046\001\002\000\004" +
    "\061\ufff8\001\002\000\014\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\063\uffcf\001\002\000\004\067\uffca\001\002\000\004" +
    "\067\155\001\002\000\004\067\153\001\002\000\014\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\063\uffce\001\002\000\004" +
    "\067\uffcb\001\002\000\014\055\uffcd\056\uffcd\057\uffcd\060" +
    "\uffcd\063\uffcd\001\002\000\004\067\151\001\002\000\014" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\063\uffd0\001\002\000" +
    "\014\055\054\056\050\057\056\060\051\063\137\001\002" +
    "\000\012\061\066\100\067\101\064\124\063\001\002\000" +
    "\012\061\132\100\067\101\064\124\063\001\002\000\004" +
    "\124\073\001\002\000\012\061\uffd6\100\uffd6\101\uffd6\124" +
    "\uffd6\001\002\000\012\061\uffd8\100\uffd8\101\uffd8\124\uffd8" +
    "\001\002\000\004\031\070\001\002\000\012\061\uffd7\100" +
    "\uffd7\101\uffd7\124\uffd7\001\002\000\004\007\071\001\002" +
    "\000\004\063\072\001\002\000\004\061\uffee\001\002\000" +
    "\004\102\074\001\002\000\004\033\102\001\002\000\006" +
    "\102\074\124\077\001\002\000\006\102\uffd3\124\uffd3\001" +
    "\002\000\004\124\101\001\002\000\006\102\uffd4\124\uffd4" +
    "\001\002\000\012\061\uffd5\100\uffd5\101\uffd5\124\uffd5\001" +
    "\002\000\022\027\110\033\113\075\103\076\105\077\111" +
    "\100\104\101\106\103\107\001\002\000\014\026\uffaa\027" +
    "\uffaa\030\uffaa\031\uffaa\034\uffaa\001\002\000\014\026\uffad" +
    "\027\uffad\030\uffad\031\uffad\034\uffad\001\002\000\014\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\034\uffa9\001\002\000\014" +
    "\026\uffac\027\uffac\030\uffac\031\uffac\034\uffac\001\002\000" +
    "\014\026\uffab\027\uffab\030\uffab\031\uffab\034\uffab\001\002" +
    "\000\022\027\110\033\113\075\103\076\105\077\111\100" +
    "\104\101\106\103\107\001\002\000\014\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\034\uffae\001\002\000\014\026\116\027" +
    "\117\030\115\031\121\034\126\001\002\000\022\027\110" +
    "\033\113\075\103\076\105\077\111\100\104\101\106\103" +
    "\107\001\002\000\014\026\116\027\117\030\115\031\121" +
    "\034\120\001\002\000\022\027\110\033\113\075\103\076" +
    "\105\077\111\100\104\101\106\103\107\001\002\000\022" +
    "\027\110\033\113\075\103\076\105\077\111\100\104\101" +
    "\106\103\107\001\002\000\022\027\110\033\113\075\103" +
    "\076\105\077\111\100\104\101\106\103\107\001\002\000" +
    "\014\026\uffa8\027\uffa8\030\uffa8\031\uffa8\034\uffa8\001\002" +
    "\000\022\027\110\033\113\075\103\076\105\077\111\100" +
    "\104\101\106\103\107\001\002\000\014\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\034\uffb0\001\002\000\014\026\uffb2\027" +
    "\uffb2\030\115\031\121\034\uffb2\001\002\000\014\026\uffb3" +
    "\027\uffb3\030\115\031\121\034\uffb3\001\002\000\014\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\034\uffb1\001\002\000\004" +
    "\035\127\001\002\000\006\102\uffd2\124\uffd2\001\002\000" +
    "\014\026\uffaf\027\uffaf\030\115\031\121\034\uffaf\001\002" +
    "\000\012\061\uffd9\100\uffd9\101\uffd9\124\uffd9\001\002\000" +
    "\004\031\133\001\002\000\004\007\134\001\002\000\004" +
    "\063\135\001\002\000\004\061\ufff0\001\002\000\014\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\063\uffd1\001\002\000\012" +
    "\061\141\100\067\101\064\124\063\001\002\000\012\061" +
    "\145\100\067\101\064\124\063\001\002\000\004\031\142" +
    "\001\002\000\004\007\143\001\002\000\004\063\144\001" +
    "\002\000\004\061\uffef\001\002\000\004\031\146\001\002" +
    "\000\004\007\147\001\002\000\004\063\150\001\002\000" +
    "\004\061\ufff1\001\002\000\004\101\152\001\002\000\014" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\063\uffc9\001\002\000" +
    "\004\101\154\001\002\000\014\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\063\uffcc\001\002\000\004\101\156\001\002\000" +
    "\014\055\uffc8\056\uffc8\057\uffc8\060\uffc8\063\uffc8\001\002" +
    "\000\014\055\054\056\050\057\056\060\051\063\172\001" +
    "\002\000\012\061\162\100\067\101\064\124\063\001\002" +
    "\000\012\061\166\100\067\101\064\124\063\001\002\000" +
    "\004\031\163\001\002\000\004\010\164\001\002\000\004" +
    "\063\165\001\002\000\004\061\uffea\001\002\000\004\031" +
    "\167\001\002\000\004\010\170\001\002\000\004\063\171" +
    "\001\002\000\004\061\uffec\001\002\000\012\061\174\100" +
    "\067\101\064\124\063\001\002\000\012\061\200\100\067" +
    "\101\064\124\063\001\002\000\004\031\175\001\002\000" +
    "\004\010\176\001\002\000\004\063\177\001\002\000\004" +
    "\061\uffeb\001\002\000\004\031\201\001\002\000\004\010" +
    "\202\001\002\000\004\063\203\001\002\000\004\061\uffed" +
    "\001\002\000\014\055\054\056\050\057\056\060\051\063" +
    "\217\001\002\000\012\061\207\100\067\101\064\124\063" +
    "\001\002\000\012\061\213\100\067\101\064\124\063\001" +
    "\002\000\004\031\210\001\002\000\004\011\211\001\002" +
    "\000\004\063\212\001\002\000\004\061\uffe6\001\002\000" +
    "\004\031\214\001\002\000\004\011\215\001\002\000\004" +
    "\063\216\001\002\000\004\061\uffe8\001\002\000\012\061" +
    "\221\100\067\101\064\124\063\001\002\000\012\061\225" +
    "\100\067\101\064\124\063\001\002\000\004\031\222\001" +
    "\002\000\004\011\223\001\002\000\004\063\224\001\002" +
    "\000\004\061\uffe7\001\002\000\004\031\226\001\002\000" +
    "\004\011\227\001\002\000\004\063\230\001\002\000\004" +
    "\061\uffe9\001\002\000\014\055\054\056\050\057\056\060" +
    "\051\063\244\001\002\000\012\061\234\100\067\101\064" +
    "\124\063\001\002\000\012\061\240\100\067\101\064\124" +
    "\063\001\002\000\004\031\235\001\002\000\004\012\236" +
    "\001\002\000\004\063\237\001\002\000\004\061\uffe2\001" +
    "\002\000\004\031\241\001\002\000\004\012\242\001\002" +
    "\000\004\063\243\001\002\000\004\061\uffe4\001\002\000" +
    "\012\061\246\100\067\101\064\124\063\001\002\000\012" +
    "\061\252\100\067\101\064\124\063\001\002\000\004\031" +
    "\247\001\002\000\004\012\250\001\002\000\004\063\251" +
    "\001\002\000\004\061\uffe3\001\002\000\004\031\253\001" +
    "\002\000\004\012\254\001\002\000\004\063\255\001\002" +
    "\000\004\061\uffe5\001\002\000\014\055\054\056\050\057" +
    "\056\060\051\063\271\001\002\000\012\061\261\100\067" +
    "\101\064\124\063\001\002\000\012\061\265\100\067\101" +
    "\064\124\063\001\002\000\004\031\262\001\002\000\004" +
    "\013\263\001\002\000\004\063\264\001\002\000\004\061" +
    "\uffde\001\002\000\004\031\266\001\002\000\004\013\267" +
    "\001\002\000\004\063\270\001\002\000\004\061\uffe0\001" +
    "\002\000\012\061\273\100\067\101\064\124\063\001\002" +
    "\000\012\061\277\100\067\101\064\124\063\001\002\000" +
    "\004\031\274\001\002\000\004\013\275\001\002\000\004" +
    "\063\276\001\002\000\004\061\uffdf\001\002\000\004\031" +
    "\300\001\002\000\004\013\301\001\002\000\004\063\302" +
    "\001\002\000\004\061\uffe1\001\002\000\014\055\054\056" +
    "\050\057\056\060\051\063\316\001\002\000\012\061\306" +
    "\100\067\101\064\124\063\001\002\000\012\061\312\100" +
    "\067\101\064\124\063\001\002\000\004\031\307\001\002" +
    "\000\004\014\310\001\002\000\004\063\311\001\002\000" +
    "\004\061\uffda\001\002\000\004\031\313\001\002\000\004" +
    "\014\314\001\002\000\004\063\315\001\002\000\004\061" +
    "\uffdc\001\002\000\012\061\320\100\067\101\064\124\063" +
    "\001\002\000\012\061\324\100\067\101\064\124\063\001" +
    "\002\000\004\031\321\001\002\000\004\014\322\001\002" +
    "\000\004\063\323\001\002\000\004\061\uffdb\001\002\000" +
    "\004\031\325\001\002\000\004\014\326\001\002\000\004" +
    "\063\327\001\002\000\004\061\uffdd\001\002\000\014\055" +
    "\054\056\050\057\056\060\051\063\343\001\002\000\012" +
    "\061\333\100\067\101\064\124\063\001\002\000\012\061" +
    "\337\100\067\101\064\124\063\001\002\000\004\031\334" +
    "\001\002\000\004\023\335\001\002\000\004\063\336\001" +
    "\002\000\004\061\ufff2\001\002\000\004\031\340\001\002" +
    "\000\004\023\341\001\002\000\004\063\342\001\002\000" +
    "\004\061\ufff4\001\002\000\012\061\345\100\067\101\064" +
    "\124\063\001\002\000\012\061\351\100\067\101\064\124" +
    "\063\001\002\000\004\031\346\001\002\000\004\023\347" +
    "\001\002\000\004\063\350\001\002\000\004\061\ufff3\001" +
    "\002\000\004\031\352\001\002\000\004\023\353\001\002" +
    "\000\004\063\354\001\002\000\004\061\ufff5\001\002\000" +
    "\004\063\356\001\002\000\004\061\357\001\002\000\004" +
    "\031\360\001\002\000\004\004\361\001\002\000\004\063" +
    "\362\001\002\000\004\002\ufffb\001\002\000\004\061\ufffa" +
    "\001\002\000\024\007\044\010\043\011\042\012\041\013" +
    "\040\014\037\023\036\024\045\031\365\001\002\000\004" +
    "\006\366\001\002\000\004\063\367\001\002\000\004\061" +
    "\370\001\002\000\004\031\371\001\002\000\004\004\372" +
    "\001\002\000\004\063\373\001\002\000\004\002\ufffc\001" +
    "\002\000\004\063\375\001\002\000\004\100\376\001\002" +
    "\000\004\061\377\001\002\000\004\031\u0100\001\002\000" +
    "\004\015\u0101\001\002\000\004\063\u0102\001\002\000\004" +
    "\061\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\006\002\005\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\027\010\030\012\031\030\032\001\001" +
    "\000\010\010\362\012\031\030\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\046\017\051\022\054\023" +
    "\327\024\052\025\056\001\001\000\016\016\046\017\051" +
    "\022\054\023\302\024\052\025\056\001\001\000\016\016" +
    "\046\017\051\022\054\023\255\024\052\025\056\001\001" +
    "\000\016\016\046\017\051\022\054\023\230\024\052\025" +
    "\056\001\001\000\016\016\046\017\051\022\054\023\203" +
    "\024\052\025\056\001\001\000\016\016\046\017\051\022" +
    "\054\023\156\024\052\025\056\001\001\000\016\016\046" +
    "\017\051\022\054\023\057\024\052\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\016\046\017\051\022\054\024" +
    "\052\025\135\001\001\000\006\026\061\027\064\001\001" +
    "\000\004\027\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\074\034\075\001\001\000\002\001\001\000\004" +
    "\034\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\113\001" +
    "\001\000\002\001\001\000\004\031\124\001\001\000\004" +
    "\031\123\001\001\000\004\031\122\001\001\000\002\001" +
    "\001\000\004\031\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\137\027\064" +
    "\001\001\000\004\027\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\046\017\051\022\054\024\052\025\135\001\001" +
    "\000\006\026\160\027\064\001\001\000\004\027\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\172\027\064" +
    "\001\001\000\004\027\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\046\017\051\022\054\024\052\025\135" +
    "\001\001\000\006\026\205\027\064\001\001\000\004\027" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\217" +
    "\027\064\001\001\000\004\027\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\046\017\051\022\054\024\052" +
    "\025\135\001\001\000\006\026\232\027\064\001\001\000" +
    "\004\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\244\027\064\001\001\000\004\027\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\016\046\017\051\022\054" +
    "\024\052\025\135\001\001\000\006\026\257\027\064\001" +
    "\001\000\004\027\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\271\027\064\001\001\000\004\027\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\046\017\051" +
    "\022\054\024\052\025\135\001\001\000\006\026\304\027" +
    "\064\001\001\000\004\027\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\316\027\064\001\001\000\004\027" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\016\046" +
    "\017\051\022\054\024\052\025\135\001\001\000\006\026" +
    "\331\027\064\001\001\000\004\027\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\343\027\064\001\001\000" +
    "\004\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }
    
    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR ::= para EXPR parc 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=pa.toString()+e.toString()+pc.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR ::= falsee 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPR ::= truee 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPR ::= decimal 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=d.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPR ::= cadena 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=c.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=id.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPR ::= num 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPR ::= menos EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPR ::= EXPR div EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+d.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPR ::= EXPR por EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+p.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPR ::= EXPR menos EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+m.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPR ::= EXPR mas EXPR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=e.toString()+m.toString()+ex.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPR",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NOMBRES_FUENTES ::= t10 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NOMBRES_FUENTES ::= t9 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NOMBRES_FUENTES ::= t8 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NOMBRES_FUENTES ::= t7 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NOMBRES_FUENTES ::= t6 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NOMBRES_FUENTES ::= t5 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NOMBRES_FUENTES ::= t4 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NOMBRES_FUENTES ::= t3 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NOMBRES_FUENTES ::= t2 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NOMBRES_FUENTES ::= t1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NOMBRES_FUENTES",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS_ALIGN ::= centrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS_ALIGN ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPOS_ALIGN ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPOS_ALIGN",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COLORES ::= morado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COLORES ::= anaranjado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COLORES ::= gris 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COLORES ::= verde 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COLORES ::= azul 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COLORES ::= amarillo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COLORES ::= rojo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLORES",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUENTES ::= font asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUENTES",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ALIGN ::= align asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ALIGN",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COLOR_ETIQUETA1 ::= textocolor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COLOR_ETIQUETA1 ::= color 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COLOR_ETIQUETA ::= COLOR_ETIQUETA1 asignacion cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COLOR_ETIQUETA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ETIQUETAS1 ::= FUENTES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ETIQUETAS1 ::= ALIGN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ETIQUETAS1 ::= COLOR_ETIQUETA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS1",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ETIQUETAS ::= ETIQUETAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ETIQUETAS ::= ETIQUETAS ETIQUETAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIAS1 ::= print para EXPR parc ptoYcoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS1",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIAS ::= SENTENCIAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIAS ::= SENTENCIAS SENTENCIAS1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TEXTO1 ::= dolar dolar SENTENCIAS dolar dolar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TEXTO1 ::= cadena 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TEXTO1 ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO1",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TEXTO ::= TEXTO1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TEXTO ::= TEXTO TEXTO1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TEXTO",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // H ::= menor h6 mayor menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // H ::= menor h6 ETIQUETAS mayor menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // H ::= menor h6 mayor TEXTO menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // H ::= menor h6 ETIQUETAS mayor TEXTO menor div h6 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // H ::= menor h5 mayor menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // H ::= menor h5 ETIQUETAS mayor menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // H ::= menor h5 mayor TEXTO menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // H ::= menor h5 ETIQUETAS mayor TEXTO menor div h5 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // H ::= menor h4 mayor menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // H ::= menor h4 ETIQUETAS mayor menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // H ::= menor h4 mayor TEXTO menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // H ::= menor h4 ETIQUETAS mayor TEXTO menor div h4 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // H ::= menor h3 mayor menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // H ::= menor h3 ETIQUETAS mayor menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // H ::= menor h3 mayor TEXTO menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // H ::= menor h3 ETIQUETAS mayor TEXTO menor div h3 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // H ::= menor h2 mayor menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // H ::= menor h2 ETIQUETAS mayor menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // H ::= menor h2 mayor TEXTO menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // H ::= menor h2 ETIQUETAS mayor TEXTO menor div h2 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // H ::= menor h1 mayor menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // H ::= menor h1 ETIQUETAS mayor menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // H ::= menor h1 mayor TEXTO menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // H ::= menor h1 ETIQUETAS mayor TEXTO menor div h1 mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("H",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // P ::= menor p mayor menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // P ::= menor p ETIQUETAS mayor menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // P ::= menor p mayor TEXTO menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // P ::= menor p ETIQUETAS mayor TEXTO menor div p mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("P",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_BODY1 ::= P 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_BODY1 ::= H 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_BODY1 ::= menor br mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY1",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_BODY ::= CUERPO_BODY1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_BODY ::= CUERPO_BODY CUERPO_BODY1 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO_BODY",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= menor body mayor menor div body mayor menor div html mayor 
            {
              Object RESULT =null;
		
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BODY ::= menor body mayor CUERPO_BODY menor div body mayor menor div html mayor 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BODY",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TITLE ::= menor title mayor id menor div title mayor 
            {
              Object RESULT =null;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		
          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TITLE",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOHTML ::= menor head mayor TITLE menor div head mayor BODY 
            {
              Object RESULT =null;
		
             
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPOHTML",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO1 ::= menor html mayor CUERPOHTML 
            {
              Object RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int a4left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int a4right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a4 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO1",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

